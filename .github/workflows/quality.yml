name: quality

on: [push, pull_request]

# Needed to upload SARIF to the Code scanning / Code quality tab
permissions:
  contents: read
  security-events: write

jobs:
  lint-type-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ['3.12']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -

      - name: Ensure Poetry on PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Install deps
        run: poetry install --no-interaction --no-root

      - name: Pre-commit (format, lint, mypy)
        run: |
          python -m pip install --upgrade pip pipx
          pipx install pre-commit
          pre-commit run --all-files

      - name: Tests + coverage
        run: poetry run pytest --cov --cov-report=xml

      - name: Coverage gate
        uses: orgoro/coverage@v3
        with:
          coverageFile: ./coverage.xml
          failCiIfError: true
          minCoverage: 85

  pyright:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: python -m pip install --upgrade pip pipx
      - run: pipx install pyright
      - run: pyright

  # === Semgrep -> SARIF -> Code scanning ===
  semgrep:
    runs-on: ubuntu-latest
    container:
      image: semgrep/semgrep:latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Semgrep (generate SARIF, keep going)
        id: semgrep
        continue-on-error: true  # ensure upload happens even with findings
        run: |
          semgrep scan --config=p/python --config=p/security-audit \
            --exclude='**/tests/**' \
            --exclude='**/scripts/**' \
            --exclude='**/*_test.py' \
            --exclude='**/test_*.py' \
            --sarif --output=semgrep-results.sarif \
            --verbose

      - name: Upload Semgrep SARIF to Code Scanning
        if: always()  # Upload even if semgrep step fails
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif
      # Optionally fail the job if Semgrep found results (kept soft by default)
      # - run: exit ${{ steps.semgrep.outputs.exit_code || 0 }}

  # === pip-audit -> SARIF -> Code scanning ===
  pip-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -

      - name: Ensure Poetry on PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install Poetry export plugin
        run: poetry self add poetry-plugin-export

      - name: Export deps from Poetry
        run: poetry export -f requirements.txt --without-hashes -o requirements.txt

      - name: Install pip-audit
        run: python -m pip install --upgrade pip pip-audit

      - name: Run pip-audit (produce SARIF, capture exit code)
        id: pipaudit
        run: |
          set +e
          pip-audit -r requirements.txt --format sarif --output pip-audit.sarif --progress-spinner off
          echo "exit_code=$?" >> $GITHUB_OUTPUT
          # Always succeed so we can upload SARIF
          exit 0

      - name: Upload pip-audit SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pip-audit.sarif

      # Re-fail the job if vulnerabilities were found
      - name: Fail if pip-audit had findings
        if: ${{ steps.pipaudit.outputs.exit_code != '0' }}
        run: |
          echo "pip-audit found vulnerabilities."
          exit 1

  # === Bandit (security lint) ===
  bandit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Bandit
        run: python -m pip install --upgrade pip bandit
      - name: Run Bandit (JSON report)
        run: >
          bandit -r ./apps
          -x ./apps/chatbot/tests,./apps/cwe_ingestion/tests,./apps/pdf_worker/tests,./apps/tests,./apps/cwe_ingestion/build/lib/tests,./apps/cwe_ingestion/scripts
          -f json -o bandit_report_no_tests.json -iii -l
      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit_report_no_tests.json
          path: bandit_report_no_tests.json
      # Optional: fail the job if Bandit found issues (parses JSON count>0)
      - name: Fail if Bandit found issues
        run: |
          python - <<'PY'
          import json, sys
          with open("bandit_report_no_tests.json") as f:
              data = json.load(f)
          issues = data.get("results", [])
          if issues:
              print(f"Bandit found {len(issues)} issue(s).")
              sys.exit(1)
          print("Bandit found no issues.")
          PY

  # === Vulture (dead code finder) ===
  vulture:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Vulture
        run: python -m pip install --upgrade pip vulture
      - name: Run Vulture
        run: |
          set +e
          vulture --sort-by-size --min-confidence 70 ./ > vulture.txt
          exit 0
      - name: Upload Vulture output
        uses: actions/upload-artifact@v4
        with:
          name: vulture.txt
          path: vulture.txt
      # Optional: fail if Vulture reported potential dead code
      - name: Fail if Vulture found dead code
        run: |
          if grep -E ":[0-9]+:" -q vulture.txt; then
            echo "::error::Vulture found potential dead code. See vulture.txt artifact."
            exit 1
          else
            echo "Vulture found no reportable dead code."
          fi

  # === Checkov (SARIF -> Code Scanning) ===
  checkov:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Checkov
        run: python -m pip install --upgrade pip checkov

      - name: Run Checkov (SARIF only, skip tests)
        id: checkov
        continue-on-error: true  # ensure upload happens even with findings
        run: |
          checkov -d . \
            --framework dockerfile,github_actions,kubernetes,helm \
            --skip-path ".git,.venv,venv,node_modules,**/tests/**" \
            -o sarif --output-file-path . || true
          # Checkov creates a nested directory, flatten it
          if [ -f results_sarif.sarif ]; then
            mv results_sarif.sarif checkov-results.sarif
          fi

      - name: Upload Checkov SARIF to Code Scanning
        if: always()  # Upload even if checkov step fails
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif