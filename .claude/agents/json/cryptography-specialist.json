{
  "agent": {
    "attribution": "# Attribution and Acknowledgments\n\n## Project Information\n- **Project**: GenAI Security Agents - Policy-as-Code Engine\n- **Repository**: genai-sec-agents\n- **License**: [To be determined]\n\n## Rule Card Sources\nRule Cards in this repository are based on:\n- Industry security standards and best practices\n- OWASP guidelines and recommendations  \n- CIS Benchmarks and controls\n- NIST Cybersecurity Framework\n- ASVS (Application Security Verification Standard)\n\n## Third-Party Components\n- **PyYAML**: YAML processing library\n- **jsonschema**: JSON Schema validation\n- **pytest**: Testing framework\n\n## OWASP CheatSheet Series\n- **Source**: https://github.com/OWASP/CheatSheetSeries\n- **License**: CC BY-SA 4.0\n- **Usage**: Semantic search corpus for security guidance\n- **Attribution**: \u00a9 OWASP Foundation, licensed under Creative Commons Attribution-ShareAlike 4.0 International License\n- **Local Path**: `vendor/owasp-cheatsheets/`\n- **Purpose**: Used to create normalized search corpus in `research/search_corpus/owasp/` for local semantic search capabilities\n\n## Contributors\n- Lead AppSec Engineer: [Name]\n- Development Team: [Names]\n\n## Standards References\nThis project implements security controls based on recognized industry standards. All Rule Cards include proper attribution to source standards in the `refs` section.",
    "build_date": "2025-09-04T18:06:34Z",
    "compiler_version": "1.0.0",
    "description": "Cryptography specialist for encryption algorithms, key management, and crypto implementations",
    "domains": [
      "Encryption algorithms",
      "Cryptographic key management",
      "Hash functions",
      "Digital signatures"
    ],
    "name": "cryptography-specialist",
    "source_digest": "sha256:1d670f362a6a6b58b8ed484dde6669f82f10a8d3f0d2aedd082f138b0d22322c",
    "version": "4ea80e36-1757009194"
  },
  "rules": [
    {
      "detect": {
        "semgrep": [
          "crypto.key-hardcoded",
          "generic.secrets.security.detected-hardcoded-key",
          "crypto.weak-crypto"
        ]
      },
      "do": [
        "Implement approved cryptographic algorithms for key exchange (e.g., Diffie-Hellman) with secure parameters"
      ],
      "dont": [
        "Use insecure key exchange algorithms"
      ],
      "id": "CRYPTO-PREVENT-KEY-001",
      "refs": {
        "asvs": [
          "V11.6.2"
        ],
        "cwe": [
          "CWE-327",
          "CWE-328",
          "CWE-329"
        ],
        "owasp": [
          "A10:2021"
        ]
      },
      "requirement": "Use approved cryptographic algorithms for key exchange with secure parameters to prevent cryptographic breaks",
      "scope": "web-application",
      "severity": "high",
      "title": "Approved Key Exchange Algorithms",
      "verify": {
        "tests": [
          "Verify implementation meets security requirements"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "crypto.key-hardcoded",
          "generic.secrets.security.detected-hardcoded-key",
          "crypto.weak-crypto"
        ]
      },
      "do": [
        "Ensure hash functions used have output length of at least 256 bits for collision resistance or 128 bits for resistance to second pre-image attacks"
      ],
      "dont": [
        "Use hash functions with inadequate bit-lengths for required collision resistance"
      ],
      "id": "CRYPTO-HASH-AUTH-001",
      "refs": {
        "asvs": [
          "V11.4.3"
        ],
        "cwe": [
          "CWE-327",
          "CWE-328",
          "CWE-329"
        ],
        "owasp": [
          "A10:2021"
        ]
      },
      "requirement": "Hash functions used in digital signatures, data authentication, or data integrity must be collision resistant with appropriate bit-lengths",
      "scope": "web-application",
      "severity": "medium",
      "title": "Hash Function Collision Resistance",
      "verify": {
        "tests": [
          "Verify implementation meets security requirements"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "crypto.key-hardcoded",
          "generic.secrets.security.detected-hardcoded-key",
          "crypto.weak-crypto"
        ]
      },
      "do": [
        "Implement crypto agility to allow for seamless upgrades and replacements of cryptographic components"
      ],
      "dont": [
        "Rely on static cryptographic configurations that cannot be easily changed"
      ],
      "id": "CRYPTO-ALLOW-KEY-CIPHER-001",
      "refs": {
        "asvs": [
          "V11.2.2"
        ],
        "cwe": [
          "CWE-327",
          "CWE-328",
          "CWE-329"
        ],
        "owasp": [
          "A10:2021"
        ]
      },
      "requirement": "Design with crypto agility to allow reconfiguration, upgrading, or swapping of cryptographic algorithms, key lengths, ciphers, and modes",
      "scope": "web-application/api/mobile/infrastructure",
      "severity": "medium",
      "title": "Crypto Agility Design",
      "verify": {
        "tests": [
          "Verify implementation meets security requirements"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "crypto.key-hardcoded",
          "generic.secrets.security.detected-hardcoded-key",
          "crypto.weak-crypto"
        ]
      },
      "do": [
        "Implement approved key derivation functions with key stretching parameters when deriving secret keys from passwords",
        "Use cryptographically secure pseudo-random number generators (CSPRNG) with at least 128 bits of entropy for generating non-guessable random numbers and strings",
        "Use approved cryptographic algorithms and modes of operation for key generation, seeding, digital signature generation, and verification",
        "Implement full memory encryption to protect sensitive data while in use",
        "Minimize data exposure during processing and encrypt data immediately after use or as soon as feasible"
      ],
      "dont": [
        "Expose application encryption keys in client-side code or public repositories"
      ],
      "id": "CRYPTO-PROTECT-KEY-MGMT-001",
      "refs": {
        "asvs": [
          "V11.4.4",
          "V11.5.1",
          "V11.6.1",
          "V11.7.1",
          "V11.7.2"
        ],
        "cwe": [
          "CWE-327",
          "CWE-328",
          "CWE-329"
        ],
        "owasp": [
          "A10:2021"
        ]
      },
      "requirement": "Application encryption keys should be properly protected, not exposed in client-side code or public ...",
      "scope": "web-application",
      "severity": "high",
      "title": "Application Key Protection and Management",
      "verify": {
        "tests": [
          "Verify implementation meets security requirements"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "crypto.key-hardcoded",
          "generic.secrets.security.detected-hardcoded-key",
          "crypto.weak-crypto"
        ]
      },
      "do": [
        "Ensure that cryptographic operations use industry-validated implementations"
      ],
      "dont": [
        "Use unvalidated or custom cryptographic implementations"
      ],
      "id": "CRYPTO-IMPL-001",
      "refs": {
        "asvs": [
          "V11.2.1"
        ],
        "cwe": [
          "CWE-327",
          "CWE-328",
          "CWE-329"
        ],
        "owasp": [
          "A10:2021"
        ]
      },
      "requirement": "Use industry-validated implementations for cryptographic operations",
      "scope": "web-application/api/mobile/infrastructure",
      "severity": "medium",
      "title": "Industry-Validated Cryptographic Implementations",
      "verify": {
        "tests": [
          "Verify implementation meets security requirements"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "crypto.key-hardcoded",
          "generic.secrets.security.detected-hardcoded-key",
          "crypto.weak-crypto"
        ]
      },
      "do": [
        "Use CSPRNG for generating non-guessable random values",
        "Ensure random number generation mechanism works securely under heavy demand"
      ],
      "dont": [
        "Use insecure random number generation methods"
      ],
      "id": "CRYPTO-CSP-001",
      "refs": {
        "asvs": [
          "V11.5.1",
          "V11.5.2"
        ],
        "cwe": [
          "CWE-327",
          "CWE-328",
          "CWE-329"
        ],
        "owasp": [
          "A10:2021"
        ]
      },
      "requirement": "Generate random numbers and strings using a cryptographically secure pseudo-random number generator (CSPRNG) with at least 128 bits of entropy",
      "scope": "web-application",
      "severity": "high",
      "title": "Secure Random Number Generation",
      "verify": {
        "tests": [
          "Verify implementation meets security requirements"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "crypto.key-hardcoded",
          "generic.secrets.security.detected-hardcoded-key",
          "crypto.weak-crypto"
        ]
      },
      "do": [
        "Implement cryptographic operations that are constant-time with no 'short-circuit' operations"
      ],
      "dont": [
        "Allow timing side-channel attacks by not implementing constant-time operations"
      ],
      "id": "CRYPTO-CONSTANT-TIME-CRYPTOGRAPHIC-001",
      "refs": {
        "asvs": [
          "V11.2.4"
        ],
        "cwe": [
          "CWE-327",
          "CWE-328",
          "CWE-329"
        ],
        "owasp": [
          "A10:2021"
        ]
      },
      "requirement": "Ensure all cryptographic operations are constant-time to avoid information leakage",
      "scope": "web-application/api/mobile/infrastructure",
      "severity": "high",
      "title": "Constant-Time Cryptographic Operations",
      "verify": {
        "tests": [
          "Verify implementation meets security requirements"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "crypto.key-hardcoded",
          "generic.secrets.security.detected-hardcoded-key",
          "crypto.weak-crypto"
        ]
      },
      "do": [
        "Verify that cryptographic primitives provide a minimum of 128-bits of security"
      ],
      "dont": [
        "Use cryptographic primitives with insufficient security strength"
      ],
      "id": "CRYPTO-KEY-CONFIG-001",
      "refs": {
        "asvs": [
          "V11.2.3"
        ],
        "cwe": [
          "CWE-327",
          "CWE-328",
          "CWE-329"
        ],
        "owasp": [
          "A10:2021"
        ]
      },
      "requirement": "Ensure that all cryptographic primitives utilize a minimum of 128-bits of security based on the algorithm, key size, and configuration",
      "scope": "web-application/api/mobile/infrastructure",
      "severity": "medium",
      "title": "Minimum Security Strength for Cryptographic Primitives",
      "verify": {
        "tests": [
          "Verify implementation meets security requirements"
        ]
      }
    }
  ],
  "schema_version": "1.0",
  "validation_hooks": {
    "semgrep": [
      "crypto.key-hardcoded",
      "crypto.weak-crypto",
      "generic.secrets.security.detected-hardcoded-key"
    ]
  }
}