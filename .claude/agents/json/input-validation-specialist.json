{
  "agent": {
    "attribution": "# Attribution and Acknowledgments\n\n## Project Information\n- **Project**: GenAI Security Agents - Policy-as-Code Engine\n- **Repository**: genai-sec-agents\n- **License**: [To be determined]\n\n## Rule Card Sources\nRule Cards in this repository are based on:\n- Industry security standards and best practices\n- OWASP guidelines and recommendations  \n- CIS Benchmarks and controls\n- NIST Cybersecurity Framework\n- ASVS (Application Security Verification Standard)\n\n## Third-Party Components\n- **PyYAML**: YAML processing library\n- **jsonschema**: JSON Schema validation\n- **pytest**: Testing framework\n\n## OWASP CheatSheet Series\n- **Source**: https://github.com/OWASP/CheatSheetSeries\n- **License**: CC BY-SA 4.0\n- **Usage**: Semantic search corpus for security guidance\n- **Attribution**: \u00a9 OWASP Foundation, licensed under Creative Commons Attribution-ShareAlike 4.0 International License\n- **Local Path**: `vendor/owasp-cheatsheets/`\n- **Purpose**: Used to create normalized search corpus in `research/search_corpus/owasp/` for local semantic search capabilities\n\n## Contributors\n- Lead AppSec Engineer: [Name]\n- Development Team: [Names]\n\n## Standards References\nThis project implements security controls based on recognized industry standards. All Rule Cards include proper attribution to source standards in the `refs` section.",
    "build_date": "2025-09-04T18:06:34Z",
    "compiler_version": "1.0.0",
    "description": "Input validation specialist for injection prevention and data sanitization",
    "domains": [
      "SQL injection prevention",
      "Command injection prevention",
      "Input sanitization",
      "Data validation"
    ],
    "name": "input-validation-specialist",
    "source_digest": "sha256:1d670f362a6a6b58b8ed484dde6669f82f10a8d3f0d2aedd082f138b0d22322c",
    "version": "4ea80e36-1757009194"
  },
  "rules": [
    {
      "detect": {
        "codeql": [
          "sql-injection"
        ],
        "semgrep": [
          "java.sql.preparedstatement",
          "csharp.sql.preparedstatement",
          "hibernate.querylanguage.preparedstatement",
          "python.django.security.injection.sql.django-sql-injection",
          "python.sqlalchemy.security.audit.sqlalchemy-execute-raw-query",
          "java.spring.security.audit.spring-sqli"
        ],
        "trufflehog": [
          "SQL Injection"
        ]
      },
      "do": [
        "Use prepared statements with variable binding in database queries",
        "Define all SQL code first and pass in each parameter to the query later",
        "Ensure the database always distinguishes between code and data"
      ],
      "dont": [
        "Avoid writing dynamic queries with string concatenation",
        "Do not allow user-supplied input to be directly appended to queries"
      ],
      "id": "SQL-INJECTION-PREVENTION-001",
      "refs": {
        "asvs": [
          "V6.1.1",
          "V6.1.2"
        ],
        "cwe": [
          "CWE-89",
          "CWE-564"
        ],
        "owasp": [
          "A1:2021",
          "A4:2021"
        ],
        "standards": [
          "ISO/IEC 27001"
        ]
      },
      "requirement": "Developers must use prepared statements with parameterized queries to prevent SQL injection vulnerabilities. Prepared statements ensure that the database distinguishes between code and data, making it impossible for attackers to change the query's intent.",
      "scope": "web-application",
      "severity": "high",
      "title": "Prevent SQL Injection with Prepared Statements",
      "verify": {
        "tests": [
          "Verify that all database queries use prepared statements with parameterized queries",
          "Test that user-supplied input is never directly appended to SQL queries",
          "Confirm that the database distinguishes between code and data in all queries"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "generic.validation.email-syntactic-check",
          "java.spring.security.spring-email-validation",
          "python.django.security.audit.avoid-unsafe-deserialization",
          "python.flask.security.audit.direct-use-of-jinja2",
          "java.spring.security.audit.spring-unvalidated-redirect"
        ],
        "trufflehog": [
          "Email address validation issues"
        ]
      },
      "do": [
        "Check for two parts separated by '@' symbol in email addresses",
        "Ensure email addresses do not contain dangerous characters",
        "Validate domain part with letters, numbers, hyphens, and periods only",
        "Perform semantic validation by sending confirmation emails for ownership verification"
      ],
      "dont": [
        "Accept email addresses without basic syntactic validation",
        "Rely solely on regular expressions for email address validation"
      ],
      "id": "INPUT-VALIDATION-003",
      "refs": {
        "asvs": [
          "V6.1.1",
          "V6.1.2"
        ],
        "cwe": [
          "CWE-20",
          "CWE-116"
        ],
        "owasp": [
          "A03:2021",
          "C3:2024"
        ]
      },
      "requirement": "Validate email addresses with both syntactic and semantic checks to ensure correct format and legitimacy.",
      "scope": "web-application",
      "severity": "medium",
      "title": "Implement email address validation with syntactic and semantic checks",
      "verify": {
        "tests": [
          "Verify that email addresses undergo both syntactic and semantic validation",
          "Test email confirmation process for ownership verification"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "python.django.security.django-input-validation",
          "java.spring.security.spring-input-validation",
          "python.django.security.audit.avoid-unsafe-deserialization",
          "python.flask.security.audit.direct-use-of-jinja2",
          "java.spring.security.audit.spring-unvalidated-redirect"
        ],
        "trufflehog": [
          "Structured data validation issues"
        ]
      },
      "do": [
        "Enforce correct syntax for structured fields (e.g., SSN, date, currency symbol)",
        "Ensure correctness of values in the specific business context (e.g., start date before end date)",
        "Use data type validators provided by web application frameworks or custom validators",
        "Validate input against JSON Schema or XML Schema for structured data"
      ],
      "dont": [
        "Rely solely on client-side validation for input validation",
        "Accept inputs without proper syntactic and semantic validation"
      ],
      "id": "INPUT-VALIDATION-001",
      "refs": {
        "asvs": [
          "V6.1.1",
          "V6.1.2"
        ],
        "cwe": [
          "CWE-20",
          "CWE-116"
        ],
        "owasp": [
          "A03:2021",
          "C3:2024"
        ]
      },
      "requirement": "All user inputs, including data from untrusted sources, must undergo both syntactic and semantic validation to ensure correct syntax and values in the specific business context.",
      "scope": "web-application",
      "severity": "high",
      "title": "Implement syntactic and semantic input validation for all user inputs",
      "verify": {
        "tests": [
          "Verify that all user inputs are validated both syntactically and semantically",
          "Test for bypassing validation by providing malformed data"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "generic.validation.allowlist",
          "javascript.security.allowlist-validation",
          "python.django.security.audit.avoid-unsafe-deserialization",
          "python.flask.security.audit.direct-use-of-jinja2",
          "java.spring.security.audit.spring-unvalidated-redirect"
        ],
        "trufflehog": [
          "Allowlist validation issues"
        ]
      },
      "do": [
        "Define strong validation patterns based on regular expressions for structured data",
        "Match input against a fixed set of options for dropdown lists or radio buttons",
        "Use allowlist validation for all user-provided input fields"
      ],
      "dont": [
        "Rely solely on denylist validation for input validation",
        "Accept inputs without matching them against an allowlist"
      ],
      "id": "INPUT-VALIDATION-002",
      "refs": {
        "asvs": [
          "V6.1.1",
          "V6.1.2"
        ],
        "cwe": [
          "CWE-20",
          "CWE-116"
        ],
        "owasp": [
          "A03:2021",
          "C3:2024"
        ]
      },
      "requirement": "Implement allowlist validation for all user inputs to define exactly what is authorized, ensuring that only authorized inputs are accepted.",
      "scope": "web-application",
      "severity": "high",
      "title": "Implement allowlist validation for all user inputs",
      "verify": {
        "tests": [
          "Verify that all user inputs are validated against allowlists",
          "Test for bypassing validation by providing unauthorized inputs"
        ]
      }
    },
    {
      "detect": {
        "codeql": [
          "sql-injection"
        ],
        "semgrep": [
          "java.sql.callablestatement",
          "dotnet.sql.command",
          "python.django.security.injection.sql.django-sql-injection",
          "python.sqlalchemy.security.audit.sqlalchemy-execute-raw-query",
          "java.spring.security.audit.spring-sqli"
        ],
        "trufflehog": [
          "SQL Injection"
        ]
      },
      "do": [
        "Build SQL statements with parameters in stored procedures",
        "Ensure stored procedures are implemented safely to prevent SQL injection",
        "Define and store SQL code in the database itself, then call from the application"
      ],
      "dont": [
        "Avoid using unsafe dynamic SQL generation within stored procedures",
        "Do not grant excessive execute rights to application accounts for stored procedures"
      ],
      "id": "SQL-INJECTION-PREVENTION-002",
      "refs": {
        "asvs": [
          "V6.1.1",
          "V6.1.2"
        ],
        "cwe": [
          "CWE-89",
          "CWE-564"
        ],
        "owasp": [
          "A1:2021",
          "A4:2021"
        ],
        "standards": [
          "ISO/IEC 27001"
        ]
      },
      "requirement": "Developers must use properly constructed stored procedures to prevent SQL injection vulnerabilities. Stored procedures should be implemented safely with predefined SQL statements and parameters to ensure the database distinguishes between code and data.",
      "scope": "web-application",
      "severity": "high",
      "title": "Implement Secure Stored Procedures",
      "verify": {
        "tests": [
          "Verify that stored procedures use predefined SQL statements with parameters",
          "Test that stored procedures are implemented safely to prevent SQL injection",
          "Confirm that stored procedures distinguish between code and data in queries"
        ]
      }
    },
    {
      "detect": {
        "codeql": [
          "sql-injection"
        ],
        "semgrep": [
          "input-validation.table-name",
          "input-validation.column-name",
          "python.django.security.audit.avoid-unsafe-deserialization",
          "python.flask.security.audit.direct-use-of-jinja2",
          "java.spring.security.audit.spring-unvalidated-redirect"
        ],
        "trufflehog": [
          "SQL Injection"
        ]
      },
      "do": [
        "Validate input for table names, column names, or sort order indicators",
        "Map parameter values to legal and expected table or column names",
        "Use input validation to prevent unauthorized input in SQL queries"
      ],
      "dont": [
        "Avoid using user parameter values directly for table or column names",
        "Do not allow unvalidated user input to be included in queries"
      ],
      "id": "SQL-INJECTION-PREVENTION-003",
      "refs": {
        "asvs": [
          "V6.1.1",
          "V6.1.2"
        ],
        "cwe": [
          "CWE-89",
          "CWE-564"
        ],
        "owasp": [
          "A1:2021",
          "A4:2021"
        ],
        "standards": [
          "ISO/IEC 27001"
        ]
      },
      "requirement": "Developers must implement allow-list input validation for parts of SQL queries that can't use bind variables, such as table names or column names. Input validation should ensure that only legal and expected values are used in queries.",
      "scope": "web-application",
      "severity": "medium",
      "title": "Implement Allow-list Input Validation",
      "verify": {
        "tests": [
          "Verify that input validation is implemented for table names, column names, and sort order indicators",
          "Test that only legal and expected values are used in SQL queries",
          "Confirm that unauthorized input is prevented from being included in queries"
        ]
      }
    }
  ],
  "schema_version": "1.0",
  "validation_hooks": {
    "codeql": [
      "sql-injection"
    ],
    "semgrep": [
      "csharp.sql.preparedstatement",
      "dotnet.sql.command",
      "generic.validation.allowlist",
      "generic.validation.email-syntactic-check",
      "hibernate.querylanguage.preparedstatement",
      "input-validation.column-name",
      "input-validation.table-name",
      "java.spring.security.audit.spring-sqli",
      "java.spring.security.audit.spring-unvalidated-redirect",
      "java.spring.security.spring-email-validation",
      "java.spring.security.spring-input-validation",
      "java.sql.callablestatement",
      "java.sql.preparedstatement",
      "javascript.security.allowlist-validation",
      "python.django.security.audit.avoid-unsafe-deserialization",
      "python.django.security.django-input-validation",
      "python.django.security.injection.sql.django-sql-injection",
      "python.flask.security.audit.direct-use-of-jinja2",
      "python.sqlalchemy.security.audit.sqlalchemy-execute-raw-query"
    ],
    "trufflehog": [
      "Allowlist validation issues",
      "Email address validation issues",
      "SQL Injection",
      "Structured data validation issues"
    ]
  }
}