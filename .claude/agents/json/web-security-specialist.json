{
  "agent": {
    "attribution": "# Attribution and Acknowledgments\n\n## Project Information\n- **Project**: GenAI Security Agents - Policy-as-Code Engine\n- **Repository**: genai-sec-agents\n- **License**: [To be determined]\n\n## Rule Card Sources\nRule Cards in this repository are based on:\n- Industry security standards and best practices\n- OWASP guidelines and recommendations  \n- CIS Benchmarks and controls\n- NIST Cybersecurity Framework\n- ASVS (Application Security Verification Standard)\n\n## Third-Party Components\n- **PyYAML**: YAML processing library\n- **jsonschema**: JSON Schema validation\n- **pytest**: Testing framework\n\n## OWASP CheatSheet Series\n- **Source**: https://github.com/OWASP/CheatSheetSeries\n- **License**: CC BY-SA 4.0\n- **Usage**: Semantic search corpus for security guidance\n- **Attribution**: \u00a9 OWASP Foundation, licensed under Creative Commons Attribution-ShareAlike 4.0 International License\n- **Local Path**: `vendor/owasp-cheatsheets/`\n- **Purpose**: Used to create normalized search corpus in `research/search_corpus/owasp/` for local semantic search capabilities\n\n## Contributors\n- Lead AppSec Engineer: [Name]\n- Development Team: [Names]\n\n## Standards References\nThis project implements security controls based on recognized industry standards. All Rule Cards include proper attribution to source standards in the `refs` section.",
    "build_date": "2025-09-04T18:06:34Z",
    "compiler_version": "1.0.0",
    "description": "Web application security specialist for XSS, CSRF, clickjacking, and web-specific attacks",
    "domains": [
      "Cross-site scripting prevention",
      "CSRF protection",
      "Clickjacking defense",
      "Web security headers"
    ],
    "name": "web-security-specialist",
    "source_digest": "sha256:1d670f362a6a6b58b8ed484dde6669f82f10a8d3f0d2aedd082f138b0d22322c",
    "version": "4ea80e36-1757009194"
  },
  "rules": [
    {
      "detect": {
        "semgrep": [
          "javascript.security.dom-based-xss",
          "python.django.security.audit.xss.direct-use-of-httpresp-write",
          "javascript.browser.security.audit.dom-based-xss",
          "java.spring.security.audit.spring-xss"
        ]
      },
      "do": [
        "Use HTML encoding followed by JavaScript encoding for untrusted data in HTML subcontext",
        "Utilize ESAPI or similar libraries for encoding untrusted data"
      ],
      "dont": [
        "Do not directly insert untrusted data into HTML subcontext without proper encoding"
      ],
      "id": "DOM-XSS-PREVENTION-RULE1",
      "refs": {
        "cwe": [
          "CWE-79"
        ],
        "owasp": [
          "A7:2021",
          "A2:2021"
        ]
      },
      "requirement": "HTML escape and then JavaScript escape all untrusted data before inserting into HTML subcontext within the execution context to prevent DOM based XSS vulnerabilities.",
      "scope": "web-application",
      "severity": "high",
      "title": "HTML and JavaScript Encoding for Untrusted Data in HTML Subcontext",
      "verify": {
        "tests": [
          "Scan codebase to ensure all untrusted data in HTML subcontext is properly encoded"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.security.dom-based-xss",
          "python.django.security.audit.xss.direct-use-of-httpresp-write",
          "javascript.browser.security.audit.dom-based-xss",
          "java.spring.security.audit.spring-xss"
        ]
      },
      "do": [
        "Minimize usage of untrusted data in event handlers and JavaScript code subcontexts",
        "Prefer safe assignment properties like textContent for populating the DOM with untrusted data"
      ],
      "dont": [
        "Do not directly insert untrusted data into event handlers or JavaScript code subcontexts"
      ],
      "id": "DOM-XSS-PREVENTION-RULE3",
      "refs": {
        "cwe": [
          "CWE-79"
        ],
        "owasp": [
          "A7:2021",
          "A2:2021"
        ]
      },
      "requirement": "Avoid including untrusted data in event handler and JavaScript code subcontexts within an execution context to prevent DOM based XSS vulnerabilities.",
      "scope": "web-application",
      "severity": "high",
      "title": "Avoid Untrusted Data in Event Handler and JavaScript Code Subcontexts",
      "verify": {
        "tests": [
          "Review codebase to ensure absence of untrusted data in event handlers and JavaScript code subcontexts"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.react.security.react-dangerously-set-inner-html",
          "javascript.angular.security.angular-bypass-security-trust",
          "javascript.lit.security.lit-unsafe-html"
        ]
      },
      "do": [
        "Follow framework best practices for templating, auto-escaping, and output encoding",
        "Be cautious of using escape hatches that directly manipulate the DOM",
        "Avoid using insecure functions like React's dangerouslySetInnerHTML or Angular's bypassSecurityTrustAs*",
        "Regularly update framework plugins and components to mitigate XSS risks"
      ],
      "dont": [
        "Use escape hatches without understanding their security implications",
        "Rely solely on framework protections without considering additional security measures"
      ],
      "id": "XSS-FRAMEWORK-001",
      "refs": {
        "owasp": [
          "A07:2021",
          "A08:2021",
          "A09:2021",
          "A10:2021"
        ]
      },
      "requirement": "Developers using modern web frameworks like React, Angular, or Lit must understand how these frameworks prevent XSS vulnerabilities and be aware of potential gaps in security mechanisms.",
      "scope": "web-application",
      "severity": "high",
      "title": "Understand XSS prevention mechanisms in modern web frameworks",
      "verify": {
        "tests": [
          "Review framework-specific XSS prevention guidelines and ensure compliance",
          "Perform code reviews to identify insecure usage of escape hatches"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "http.cookie.samesite-strict",
          "http.cookie.samesite-lax",
          "python.django.security.audit.session-cookie-secure-false",
          "python.django.security.audit.session-cookie-httponly-false",
          "java.spring.security.audit.spring-csrf-disabled"
        ],
        "trufflehog": [
          "SameSite Cookie Attribute",
          "Basic Auth"
        ]
      },
      "do": [
        "Set SameSite attribute to 'strict' for session cookies to prevent them from being sent in cross-origin requests",
        "Consider using SameSite attribute 'lax' for session cookies to allow them in top-level navigations and safe HTTP methods"
      ],
      "dont": [
        "Do not solely rely on SameSite attribute for Clickjacking defense, use in conjunction with other mechanisms"
      ],
      "id": "CLICKJACKING-DEFENSE-003",
      "refs": {
        "asvs": [
          "V6.1.1",
          "V6.1.2"
        ],
        "cwe": [
          "CWE-693",
          "CWE-1021"
        ],
        "owasp": [
          "A6:2021"
        ],
        "standards": [
          "RFC 6265bis"
        ]
      },
      "requirement": "Mark session cookies with SameSite attribute as 'strict' or 'lax' to prevent them from being included in requests made to a page within an iframe. This helps defend against Clickjacking attacks by ensuring that authenticated sessions are not vulnerable to being hijacked.",
      "scope": "web-application",
      "severity": "medium",
      "title": "Secure session cookies with SameSite attribute to mitigate Clickjacking",
      "verify": {
        "tests": [
          "Verify session cookies are marked with SameSite attribute as 'strict' or 'lax'",
          "Test that session cookies are not included in requests within iframes"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.security.dom-based-xss",
          "python.django.security.audit.xss.direct-use-of-httpresp-write",
          "javascript.browser.security.audit.dom-based-xss",
          "java.spring.security.audit.spring-xss"
        ]
      },
      "do": [
        "Use JavaScript encoding for untrusted data in HTML attribute subcontext",
        "Avoid unnecessary HTML attribute encoding in execution context"
      ],
      "dont": [
        "Do not double-encode untrusted data in HTML attribute subcontext"
      ],
      "id": "DOM-XSS-PREVENTION-RULE2",
      "refs": {
        "cwe": [
          "CWE-79"
        ],
        "owasp": [
          "A7:2021",
          "A2:2021"
        ]
      },
      "requirement": "JavaScript escape untrusted data before inserting into HTML attribute subcontext within the execution context to prevent DOM based XSS vulnerabilities.",
      "scope": "web-application",
      "severity": "medium",
      "title": "JavaScript Escape for Untrusted Data in HTML Attribute Subcontext",
      "verify": {
        "tests": [
          "Check codebase to confirm proper JavaScript encoding for HTML attribute subcontext"
        ]
      }
    },
    {
      "detect": {
        "custom": [
          "Manual review of HTML sanitization implementation"
        ]
      },
      "do": [
        "Use DOMPurify library for HTML sanitization",
        "Regularly patch and update HTML sanitization libraries",
        "Ensure sanitized content is not modified afterwards to maintain security"
      ],
      "dont": [
        "Rely solely on output encoding for user-generated HTML content",
        "Modify sanitized content after applying HTML sanitization"
      ],
      "id": "XSS-HTML-SANITIZATION-003",
      "refs": {
        "owasp": [
          "A05:2021",
          "A06:2021"
        ]
      },
      "requirement": "When allowing users to author HTML content, utilize HTML sanitization libraries like DOMPurify to strip dangerous HTML and prevent XSS attacks.",
      "scope": "web-application",
      "severity": "medium",
      "title": "Implement HTML sanitization for user-generated content",
      "verify": {
        "tests": [
          "Test user-generated HTML content with known XSS payloads",
          "Verify that DOMPurify or similar library is effectively sanitizing input"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "generic.xss.security.unsafe-output-encoding",
          "javascript.security.unsafe-javascript-context",
          "css.security.unsafe-css-context"
        ]
      },
      "do": [
        "Use HTML entity encoding for HTML contexts",
        "Apply HTML attribute encoding for HTML attribute contexts",
        "Utilize JavaScript encoding for JavaScript contexts",
        "Implement CSS hex encoding for CSS contexts",
        "Use URL encoding for URL contexts"
      ],
      "dont": [
        "Display user input without proper encoding in any context"
      ],
      "id": "XSS-OUTPUT-ENCODING-002",
      "refs": {
        "owasp": [
          "A01:2021",
          "A02:2021",
          "A03:2021",
          "A04:2021"
        ]
      },
      "requirement": "Ensure all user input displayed in HTML, HTML attribute, JavaScript, CSS, and URL contexts is properly encoded to prevent XSS vulnerabilities.",
      "scope": "web-application",
      "severity": "high",
      "title": "Implement proper output encoding for different contexts",
      "verify": {
        "tests": [
          "Automated scanning to detect missing or improper output encoding",
          "Manual code review to verify correct encoding implementation"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "http.response-header.x-frame-options-deny",
          "http.response-header.x-frame-options-sameorigin",
          "http.response-header.x-frame-options-allow-from",
          "python.django.security.audit.xss-filter-disabled",
          "python.flask.security.audit.flask-cors-origin-wildcard",
          "java.spring.security.audit.spring-security-headers"
        ],
        "trufflehog": [
          "X-Frame-Options"
        ]
      },
      "do": [
        "Set X-Frame-Options header to DENY to prevent any domain from framing the content",
        "Set X-Frame-Options header to SAMEORIGIN to only allow the current site to frame the content",
        "Use ALLOW-FROM uri to permit specific URIs to frame the page (deprecated, check browser support)"
      ],
      "dont": [
        "Do not rely solely on meta-tags for X-Frame-Options, apply the header in HTTP responses"
      ],
      "id": "CLICKJACKING-DEFENSE-001",
      "refs": {
        "asvs": [
          "V6.1.1",
          "V6.1.2"
        ],
        "cwe": [
          "CWE-693",
          "CWE-1021"
        ],
        "owasp": [
          "A6:2021"
        ],
        "standards": [
          "RFC 7034"
        ]
      },
      "requirement": "Set the X-Frame-Options HTTP response header to DENY, SAMEORIGIN, or ALLOW-FROM uri to prevent the browser from loading the page in a frame. This helps defend against Clickjacking attacks by ensuring content is not embedded into other sites.",
      "scope": "web-application",
      "severity": "high",
      "title": "Implement X-Frame-Options header to prevent Clickjacking",
      "verify": {
        "tests": [
          "Verify X-Frame-Options header is correctly set in HTTP responses",
          "Test that the page cannot be framed in different domains"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "http.response-header.content-security-policy-frame-ancestors-none",
          "http.response-header.content-security-policy-frame-ancestors-self",
          "http.response-header.content-security-policy-frame-ancestors-specific",
          "python.django.security.audit.session-cookie-secure-false",
          "python.django.security.audit.session-cookie-httponly-false",
          "java.spring.security.audit.spring-csrf-disabled"
        ],
        "trufflehog": [
          "Content-Security-Policy",
          "Basic Auth"
        ]
      },
      "do": [
        "Use frame-ancestors 'none' to prevent any domain from framing the content",
        "Specify frame-ancestors 'self' to only allow the current site to frame the content",
        "Authorize specific domains using frame-ancestors directive"
      ],
      "dont": [
        "Do not forget to include the frame-ancestors directive in the Content-Security-Policy header"
      ],
      "id": "CLICKJACKING-DEFENSE-002",
      "refs": {
        "asvs": [
          "V6.1.1",
          "V6.1.2"
        ],
        "cwe": [
          "CWE-693",
          "CWE-1021"
        ],
        "owasp": [
          "A6:2021"
        ],
        "standards": [
          "W3C CSP Level 2"
        ]
      },
      "requirement": "Implement the frame-ancestors directive in Content-Security-Policy HTTP response header to control which domains are allowed to render a page in a frame or iframe. This helps defend against Clickjacking attacks by preventing content from being embedded into unauthorized sites.",
      "scope": "web-application",
      "severity": "medium",
      "title": "Utilize Content Security Policy (CSP) frame-ancestors to prevent Clickjacking",
      "verify": {
        "tests": [
          "Verify Content-Security-Policy header includes frame-ancestors directive",
          "Test that unauthorized domains cannot frame the page"
        ]
      }
    }
  ],
  "schema_version": "1.0",
  "validation_hooks": {
    "custom": [
      "Manual review of HTML sanitization implementation"
    ],
    "semgrep": [
      "css.security.unsafe-css-context",
      "generic.xss.security.unsafe-output-encoding",
      "http.cookie.samesite-lax",
      "http.cookie.samesite-strict",
      "http.response-header.content-security-policy-frame-ancestors-none",
      "http.response-header.content-security-policy-frame-ancestors-self",
      "http.response-header.content-security-policy-frame-ancestors-specific",
      "http.response-header.x-frame-options-allow-from",
      "http.response-header.x-frame-options-deny",
      "http.response-header.x-frame-options-sameorigin",
      "java.spring.security.audit.spring-csrf-disabled",
      "java.spring.security.audit.spring-security-headers",
      "java.spring.security.audit.spring-xss",
      "javascript.angular.security.angular-bypass-security-trust",
      "javascript.browser.security.audit.dom-based-xss",
      "javascript.lit.security.lit-unsafe-html",
      "javascript.react.security.react-dangerously-set-inner-html",
      "javascript.security.dom-based-xss",
      "javascript.security.unsafe-javascript-context",
      "python.django.security.audit.session-cookie-httponly-false",
      "python.django.security.audit.session-cookie-secure-false",
      "python.django.security.audit.xss-filter-disabled",
      "python.django.security.audit.xss.direct-use-of-httpresp-write",
      "python.flask.security.audit.flask-cors-origin-wildcard"
    ],
    "trufflehog": [
      "Basic Auth",
      "Content-Security-Policy",
      "SameSite Cookie Attribute",
      "X-Frame-Options"
    ]
  }
}