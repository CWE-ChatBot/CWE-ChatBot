{
  "agent": {
    "attribution": "# Attribution and Acknowledgments\n\n## Project Information\n- **Project**: GenAI Security Agents - Policy-as-Code Engine\n- **Repository**: genai-sec-agents\n- **License**: [To be determined]\n\n## Rule Card Sources\nRule Cards in this repository are based on:\n- Industry security standards and best practices\n- OWASP guidelines and recommendations  \n- CIS Benchmarks and controls\n- NIST Cybersecurity Framework\n- ASVS (Application Security Verification Standard)\n\n## Third-Party Components\n- **PyYAML**: YAML processing library\n- **jsonschema**: JSON Schema validation\n- **pytest**: Testing framework\n\n## OWASP CheatSheet Series\n- **Source**: https://github.com/OWASP/CheatSheetSeries\n- **License**: CC BY-SA 4.0\n- **Usage**: Semantic search corpus for security guidance\n- **Attribution**: \u00a9 OWASP Foundation, licensed under Creative Commons Attribution-ShareAlike 4.0 International License\n- **Local Path**: `vendor/owasp-cheatsheets/`\n- **Purpose**: Used to create normalized search corpus in `research/search_corpus/owasp/` for local semantic search capabilities\n\n## Contributors\n- Lead AppSec Engineer: [Name]\n- Development Team: [Names]\n\n## Standards References\nThis project implements security controls based on recognized industry standards. All Rule Cards include proper attribution to source standards in the `refs` section.",
    "build_date": "2025-09-04T18:06:34Z",
    "compiler_version": "1.0.0",
    "description": "Cookie security specialist for secure cookie attributes and session cookies",
    "domains": [
      "Secure cookie configuration",
      "HttpOnly cookies",
      "SameSite protection",
      "Cookie security attributes"
    ],
    "name": "cookie-specialist",
    "source_digest": "sha256:1d670f362a6a6b58b8ed484dde6669f82f10a8d3f0d2aedd082f138b0d22322c",
    "version": "4ea80e36-1757009194"
  },
  "rules": [
    {
      "detect": {
        "codeql": [
          "cookie-without-httponly",
          "insecure-cookie-configuration"
        ],
        "semgrep": [
          "javascript.express.security.express-cookie-settings.express-cookie-no-httponly",
          "python.flask.security.insecure-cookies.flask-cookie-no-httponly",
          "java.servlet.security.httponly-cookie",
          "php.security.cookie-not-httponly"
        ]
      },
      "do": [
        "Set HttpOnly attribute on all session cookies",
        "Apply HttpOnly to authentication and authorization cookies",
        "Use HttpOnly for cookies containing sensitive user data or preferences",
        "Configure web framework cookie settings to default HttpOnly to true",
        "Validate HttpOnly attribute is present in cookie security tests",
        "Document cookie security requirements for development teams"
      ],
      "dont": [
        "Do not omit HttpOnly attribute from session management cookies",
        "Do not create security-sensitive cookies accessible to JavaScript",
        "Do not rely solely on CSRF tokens without HttpOnly session cookies",
        "Do not use HttpOnly for functional cookies that legitimately need client-side access",
        "Do not assume HttpOnly prevents all cookie-based attacks"
      ],
      "id": "COOKIES-HTTPONLY-001",
      "refs": {
        "asvs": [
          "V3.4.1",
          "V3.4.2"
        ],
        "cwe": [
          "CWE-1004",
          "CWE-79",
          "CWE-200"
        ],
        "owasp": [
          "A03:2021",
          "A05:2021"
        ],
        "standards": [
          "RFC 6265",
          "OWASP Session Management Cheat Sheet"
        ]
      },
      "requirement": "All cookies containing session identifiers, authentication tokens, or other security-sensitive data must include the HttpOnly attribute to prevent client-side script access and mitigate XSS-based cookie theft.",
      "scope": "web-applications",
      "severity": "high",
      "title": "Session and security-sensitive cookies must use HttpOnly attribute",
      "verify": {
        "tests": [
          "Verify all session cookies include HttpOnly attribute in Set-Cookie headers",
          "Test that HttpOnly cookies are not accessible via document.cookie in browser",
          "Confirm authentication cookies cannot be read by malicious JavaScript",
          "Validate cookie security configuration in framework settings",
          "Test XSS attack scenarios cannot access HttpOnly session cookies"
        ]
      }
    },
    {
      "detect": {
        "codeql": [
          "cookie-without-samesite",
          "insecure-samesite-configuration"
        ],
        "semgrep": [
          "javascript.express.security.express-cookie-settings.express-cookie-no-samesite",
          "python.flask.security.insecure-cookies.flask-cookie-no-samesite",
          "java.servlet.security.samesite-cookie",
          "php.security.cookie-no-samesite"
        ]
      },
      "do": [
        "Set SameSite=Strict for highly sensitive cookies that don't need cross-site access",
        "Use SameSite=Lax for session cookies that need some cross-site functionality",
        "Apply SameSite=None with Secure for cookies requiring cross-site access",
        "Configure SameSite policy based on application's cross-origin requirements",
        "Implement SameSite as part of comprehensive CSRF defense strategy",
        "Test SameSite behavior with application's legitimate cross-origin workflows"
      ],
      "dont": [
        "Do not omit SameSite attribute from authentication or session cookies",
        "Do not use SameSite=None without the Secure attribute",
        "Do not rely solely on SameSite for CSRF protection",
        "Do not use SameSite=Strict for cookies needed in legitimate cross-site scenarios",
        "Do not assume older browsers support SameSite attribute"
      ],
      "id": "COOKIES-SAMESITE-001",
      "refs": {
        "asvs": [
          "V3.4.1",
          "V4.2.2"
        ],
        "cwe": [
          "CWE-352",
          "CWE-346"
        ],
        "owasp": [
          "A01:2021"
        ],
        "standards": [
          "RFC 6265bis",
          "OWASP Cross-Site Request Forgery Prevention Cheat Sheet"
        ]
      },
      "requirement": "Session management and authentication cookies must include the SameSite attribute with appropriate values (Strict, Lax, or None with Secure) to prevent cross-site request forgery attacks.",
      "scope": "web-applications",
      "severity": "medium",
      "title": "Authentication and session cookies must use appropriate SameSite attribute",
      "verify": {
        "tests": [
          "Verify SameSite attribute is present on session and authentication cookies",
          "Test cross-site request scenarios respect SameSite policy",
          "Confirm SameSite=None cookies also include Secure attribute",
          "Validate cookie behavior in cross-origin iframe and AJAX scenarios",
          "Test CSRF attack mitigation with SameSite cookie configuration"
        ]
      }
    },
    {
      "detect": {
        "codeql": [
          "cookie-without-secure-flag",
          "sensitive-cookie-not-secure"
        ],
        "semgrep": [
          "javascript.express.security.express-cookie-settings.express-cookie-no-secure",
          "python.flask.security.insecure-cookies.flask-cookie-no-secure",
          "java.servlet.security.secure-cookie",
          "php.security.cookie-not-secure"
        ]
      },
      "do": [
        "Set Secure attribute on all session and authentication cookies",
        "Apply Secure flag to cookies containing sensitive user data",
        "Configure application frameworks to automatically set Secure for sensitive cookies",
        "Implement HTTPS-only cookie policies in production environments",
        "Use conditional Secure setting based on HTTPS availability in development",
        "Validate Secure attribute presence in automated security tests"
      ],
      "dont": [
        "Do not send sensitive cookies over unencrypted HTTP connections",
        "Do not omit Secure attribute from authentication or session cookies",
        "Do not rely on application-level encryption as substitute for HTTPS",
        "Do not use Secure flag for functional cookies that need HTTP access during development",
        "Do not assume Secure attribute alone provides complete cookie protection"
      ],
      "id": "COOKIES-SECURE-001",
      "refs": {
        "asvs": [
          "V3.4.1",
          "V9.1.3"
        ],
        "cwe": [
          "CWE-614",
          "CWE-319",
          "CWE-523"
        ],
        "owasp": [
          "A02:2021",
          "A05:2021"
        ],
        "standards": [
          "RFC 6265",
          "OWASP Session Management Cheat Sheet"
        ]
      },
      "requirement": "All cookies containing sensitive data, session identifiers, or authentication information must include the Secure attribute to ensure transmission only over encrypted HTTPS connections.",
      "scope": "web-applications",
      "severity": "high",
      "title": "Security-sensitive cookies must use Secure attribute for HTTPS transmission",
      "verify": {
        "tests": [
          "Verify Secure attribute is present on sensitive cookies in HTTPS responses",
          "Test that secure cookies are not transmitted over HTTP connections",
          "Confirm session cookies include Secure flag in production configuration",
          "Validate cookie security settings in web server and application configuration",
          "Test cookie behavior in mixed HTTP/HTTPS environments"
        ]
      }
    }
  ],
  "schema_version": "1.0",
  "validation_hooks": {
    "codeql": [
      "cookie-without-httponly",
      "cookie-without-samesite",
      "cookie-without-secure-flag",
      "insecure-cookie-configuration",
      "insecure-samesite-configuration",
      "sensitive-cookie-not-secure"
    ],
    "semgrep": [
      "java.servlet.security.httponly-cookie",
      "java.servlet.security.samesite-cookie",
      "java.servlet.security.secure-cookie",
      "javascript.express.security.express-cookie-settings.express-cookie-no-httponly",
      "javascript.express.security.express-cookie-settings.express-cookie-no-samesite",
      "javascript.express.security.express-cookie-settings.express-cookie-no-secure",
      "php.security.cookie-no-samesite",
      "php.security.cookie-not-httponly",
      "php.security.cookie-not-secure",
      "python.flask.security.insecure-cookies.flask-cookie-no-httponly",
      "python.flask.security.insecure-cookies.flask-cookie-no-samesite",
      "python.flask.security.insecure-cookies.flask-cookie-no-secure"
    ]
  }
}