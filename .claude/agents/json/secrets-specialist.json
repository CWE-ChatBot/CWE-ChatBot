{
  "agent": {
    "attribution": "# Attribution and Acknowledgments\n\n## Project Information\n- **Project**: GenAI Security Agents - Policy-as-Code Engine\n- **Repository**: genai-sec-agents\n- **License**: [To be determined]\n\n## Rule Card Sources\nRule Cards in this repository are based on:\n- Industry security standards and best practices\n- OWASP guidelines and recommendations  \n- CIS Benchmarks and controls\n- NIST Cybersecurity Framework\n- ASVS (Application Security Verification Standard)\n\n## Third-Party Components\n- **PyYAML**: YAML processing library\n- **jsonschema**: JSON Schema validation\n- **pytest**: Testing framework\n\n## OWASP CheatSheet Series\n- **Source**: https://github.com/OWASP/CheatSheetSeries\n- **License**: CC BY-SA 4.0\n- **Usage**: Semantic search corpus for security guidance\n- **Attribution**: \u00a9 OWASP Foundation, licensed under Creative Commons Attribution-ShareAlike 4.0 International License\n- **Local Path**: `vendor/owasp-cheatsheets/`\n- **Purpose**: Used to create normalized search corpus in `research/search_corpus/owasp/` for local semantic search capabilities\n\n## Contributors\n- Lead AppSec Engineer: [Name]\n- Development Team: [Names]\n\n## Standards References\nThis project implements security controls based on recognized industry standards. All Rule Cards include proper attribution to source standards in the `refs` section.",
    "build_date": "2025-09-04T18:06:34Z",
    "compiler_version": "1.0.0",
    "description": "Secrets management specialist for API keys, credentials, and sensitive data protection",
    "domains": [
      "API key security",
      "Database credential protection",
      "Hardcoded secrets prevention",
      "Secret rotation"
    ],
    "name": "secrets-specialist",
    "source_digest": "sha256:1d670f362a6a6b58b8ed484dde6669f82f10a8d3f0d2aedd082f138b0d22322c",
    "version": "4ea80e36-1757009194"
  },
  "rules": [
    {
      "detect": {
        "codeql": [
          "hardcoded-jwt-secret",
          "weak-jwt-signature"
        ],
        "semgrep": [
          "javascript.jsonwebtoken.security.jwt-hardcode-secret",
          "python.jwt.security.jwt-hardcode-secret",
          "java.jwt.security.jwt-hardcode-secret",
          "generic.secrets.security.jwt-secret"
        ],
        "trufflehog": [
          "JWT Secret",
          "Private Key"
        ]
      },
      "do": [
        "Generate JWT signing keys using cryptographically secure random number generators",
        "Store JWT signing secrets in dedicated key management systems",
        "Use environment variables or secure configuration for JWT secrets in runtime",
        "Implement key rotation procedures for JWT signing keys",
        "Use asymmetric cryptography (RS256, ES256) where possible instead of shared secrets",
        "Ensure JWT signing keys have sufficient entropy (minimum 256 bits for HS256)"
      ],
      "dont": [
        "Do not use predictable or weak JWT signing secrets (e.g., 'secret', 'key', 'password')",
        "Do not hardcode JWT secrets in configuration files or source code",
        "Do not reuse JWT signing keys across different environments or applications",
        "Do not use the 'none' algorithm for JWT signatures in production",
        "Do not commit JWT signing keys to version control systems"
      ],
      "id": "SECRETS-JWT-001",
      "refs": {
        "asvs": [
          "V3.1.1",
          "V6.2.1",
          "V6.4.2"
        ],
        "cwe": [
          "CWE-798",
          "CWE-321",
          "CWE-347"
        ],
        "owasp": [
          "A02:2021",
          "A07:2021"
        ],
        "standards": [
          "RFC 7519",
          "RFC 7515"
        ]
      },
      "requirement": "JWT signing keys and secrets must be cryptographically secure, randomly generated, stored in secure key management systems, and never embedded in source code.",
      "scope": "jwt-implementations",
      "severity": "critical",
      "title": "JWT signing secrets must not be hardcoded or use weak values",
      "verify": {
        "tests": [
          "Verify JWT signing secrets are not present in source code",
          "Test that JWT verification fails with incorrect or missing secrets",
          "Confirm JWT tokens cannot be generated without proper secret access",
          "Validate JWT secret rotation procedures maintain token validation capability",
          "Test rejection of JWT tokens signed with weak or default secrets"
        ]
      }
    },
    {
      "detect": {
        "codeql": [
          "hardcoded-database-password",
          "database-query-built-from-user-controlled-sources"
        ],
        "semgrep": [
          "generic.secrets.security.detected-password",
          "python.django.security.django-hardcoded-db-password",
          "java.spring.security.hardcoded-database-password",
          "javascript.sequelize.security.hardcoded-secret"
        ],
        "trufflehog": [
          "Database Connection String",
          "MySQL Password",
          "PostgreSQL Password"
        ]
      },
      "do": [
        "Use environment variables for database credentials",
        "Implement connection string builders that load credentials at runtime",
        "Use database authentication tokens with automatic renewal",
        "Store database passwords in enterprise secret management systems",
        "Implement least-privilege database access with role-based authentication",
        "Use encrypted connection strings where supported"
      ],
      "dont": [
        "Do not embed database passwords in connection strings within code",
        "Do not hardcode database usernames and passwords in configuration files",
        "Do not commit .env files containing database credentials to version control",
        "Do not use default or placeholder database credentials in any environment",
        "Do not expose database connection details in application logs or error messages"
      ],
      "id": "SECRETS-DB-001",
      "refs": {
        "asvs": [
          "V2.1.12",
          "V6.4.1",
          "V9.2.3"
        ],
        "cwe": [
          "CWE-798",
          "CWE-259",
          "CWE-256"
        ],
        "owasp": [
          "A02:2021",
          "A07:2021"
        ],
        "standards": [
          "PCI DSS 8.2.1"
        ]
      },
      "requirement": "Database connection strings, usernames, passwords, and connection parameters must be externalized from source code and retrieved from secure configuration systems.",
      "scope": "all-languages",
      "severity": "critical",
      "title": "Database credentials must not be hardcoded in applications",
      "verify": {
        "tests": [
          "Verify no database credentials appear in source code",
          "Test application startup fails when database credentials are missing",
          "Confirm database connections use externally provided credentials",
          "Validate database connection encryption is enforced",
          "Test credential rotation scenarios without service interruption"
        ]
      }
    },
    {
      "detect": {
        "codeql": [
          "hardcoded-cloud-credentials",
          "cloud-service-credential-exposure"
        ],
        "semgrep": [
          "generic.secrets.security.detected-aws-access-key",
          "generic.secrets.security.detected-azure-key",
          "generic.secrets.security.detected-gcp-key",
          "cloud.aws.security.hardcoded-aws-credentials"
        ],
        "trufflehog": [
          "AWS Access Key",
          "AWS Secret Key",
          "Azure Storage Account Key",
          "Google Cloud Service Account"
        ]
      },
      "do": [
        "Use cloud-native IAM roles and service accounts for application authentication",
        "Implement workload identity federation where supported",
        "Store cloud credentials in dedicated secret management services (AWS Secrets Manager, Azure Key Vault, GCP Secret Manager)",
        "Use temporary security credentials with automatic rotation",
        "Apply principle of least privilege to cloud service permissions",
        "Implement credential scanning in CI/CD pipelines"
      ],
      "dont": [
        "Do not hardcode AWS access keys, secret keys, or session tokens in code",
        "Do not embed Azure service principal credentials or connection strings",
        "Do not commit Google Cloud service account keys to version control",
        "Do not use long-lived credentials when shorter-lived alternatives exist",
        "Do not grant overly broad permissions to cloud service accounts",
        "Do not expose cloud credentials in environment variables visible to unauthorized processes"
      ],
      "id": "SECRETS-CLOUD-001",
      "refs": {
        "asvs": [
          "V6.4.1",
          "V6.4.2",
          "V14.1.3"
        ],
        "cwe": [
          "CWE-798",
          "CWE-540",
          "CWE-522"
        ],
        "owasp": [
          "A02:2021",
          "A05:2021"
        ],
        "standards": [
          "AWS IAM Best Practices",
          "Azure Security Best Practices",
          "GCP IAM Best Practices"
        ]
      },
      "requirement": "Cloud service access keys, tokens, and credentials must be managed through secure identity and access management systems, never hardcoded in applications or configuration files.",
      "scope": "cloud-applications",
      "severity": "critical",
      "title": "Cloud service credentials and access keys must be secured",
      "verify": {
        "tests": [
          "Verify no cloud service credentials appear in source code or configuration",
          "Test application authentication using IAM roles instead of hardcoded keys",
          "Confirm credential rotation procedures work without service disruption",
          "Validate that cloud permissions follow least-privilege principles",
          "Test CI/CD pipeline credential scanning catches hardcoded keys"
        ]
      }
    },
    {
      "detect": {
        "codeql": [
          "hardcoded-credentials"
        ],
        "semgrep": [
          "generic.secrets.security.detected-aws-access-key",
          "generic.secrets.security.detected-generic-secret",
          "javascript.express.security.express-hardcoded-secret",
          "python.django.security.django-hardcoded-secret"
        ],
        "trufflehog": [
          "AWS Access Key",
          "Generic API Key",
          "GitHub Token"
        ]
      },
      "do": [
        "Use environment variables for API keys",
        "Store credentials in secure key management systems (AWS Secrets Manager, HashiCorp Vault)",
        "Implement proper secret rotation procedures",
        "Use service account authentication where available",
        "Validate that secrets are loaded from secure sources at application startup"
      ],
      "dont": [
        "Do not hardcode API keys in configuration files committed to version control",
        "Do not embed tokens directly in source code",
        "Do not use placeholder or default API keys in production code",
        "Do not store credentials in environment files (.env) committed to repositories",
        "Do not log or expose API keys in error messages or debug output"
      ],
      "id": "SECRETS-API-001",
      "refs": {
        "asvs": [
          "V6.4.1",
          "V6.4.2"
        ],
        "cwe": [
          "CWE-798",
          "CWE-540"
        ],
        "owasp": [
          "A02:2021"
        ],
        "standards": [
          "NIST SP 800-57"
        ]
      },
      "requirement": "API keys, tokens, and service credentials must be stored in secure configuration management systems and injected at runtime, never embedded directly in source code.",
      "scope": "all-languages",
      "severity": "critical",
      "title": "API keys must not be hardcoded in source code",
      "verify": {
        "tests": [
          "Verify no API keys appear in source code or configuration files",
          "Test that application fails gracefully when API keys are missing from environment",
          "Confirm API keys are loaded from secure configuration at runtime",
          "Validate secret rotation procedures work without application downtime"
        ]
      }
    }
  ],
  "schema_version": "1.0",
  "validation_hooks": {
    "codeql": [
      "cloud-service-credential-exposure",
      "database-query-built-from-user-controlled-sources",
      "hardcoded-cloud-credentials",
      "hardcoded-credentials",
      "hardcoded-database-password",
      "hardcoded-jwt-secret",
      "weak-jwt-signature"
    ],
    "semgrep": [
      "cloud.aws.security.hardcoded-aws-credentials",
      "generic.secrets.security.detected-aws-access-key",
      "generic.secrets.security.detected-azure-key",
      "generic.secrets.security.detected-gcp-key",
      "generic.secrets.security.detected-generic-secret",
      "generic.secrets.security.detected-password",
      "generic.secrets.security.jwt-secret",
      "java.jwt.security.jwt-hardcode-secret",
      "java.spring.security.hardcoded-database-password",
      "javascript.express.security.express-hardcoded-secret",
      "javascript.jsonwebtoken.security.jwt-hardcode-secret",
      "javascript.sequelize.security.hardcoded-secret",
      "python.django.security.django-hardcoded-db-password",
      "python.django.security.django-hardcoded-secret",
      "python.jwt.security.jwt-hardcode-secret"
    ],
    "trufflehog": [
      "AWS Access Key",
      "AWS Secret Key",
      "Azure Storage Account Key",
      "Database Connection String",
      "Generic API Key",
      "GitHub Token",
      "Google Cloud Service Account",
      "JWT Secret",
      "MySQL Password",
      "PostgreSQL Password",
      "Private Key"
    ]
  }
}