{
  "agent": {
    "attribution": "# Attribution and Acknowledgments\n\n## Project Information\n- **Project**: GenAI Security Agents - Policy-as-Code Engine\n- **Repository**: genai-sec-agents\n- **License**: [To be determined]\n\n## Rule Card Sources\nRule Cards in this repository are based on:\n- Industry security standards and best practices\n- OWASP guidelines and recommendations  \n- CIS Benchmarks and controls\n- NIST Cybersecurity Framework\n- ASVS (Application Security Verification Standard)\n\n## Third-Party Components\n- **PyYAML**: YAML processing library\n- **jsonschema**: JSON Schema validation\n- **pytest**: Testing framework\n\n## OWASP CheatSheet Series\n- **Source**: https://github.com/OWASP/CheatSheetSeries\n- **License**: CC BY-SA 4.0\n- **Usage**: Semantic search corpus for security guidance\n- **Attribution**: \u00a9 OWASP Foundation, licensed under Creative Commons Attribution-ShareAlike 4.0 International License\n- **Local Path**: `vendor/owasp-cheatsheets/`\n- **Purpose**: Used to create normalized search corpus in `research/search_corpus/owasp/` for local semantic search capabilities\n\n## Contributors\n- Lead AppSec Engineer: [Name]\n- Development Team: [Names]\n\n## Standards References\nThis project implements security controls based on recognized industry standards. All Rule Cards include proper attribution to source standards in the `refs` section.",
    "build_date": "2025-09-04T18:06:35Z",
    "compiler_version": "1.0.0",
    "description": "Node.js security specialist for Node.js-specific vulnerabilities and secure coding patterns",
    "domains": [
      "Node.js injection prevention",
      "Node.js dependency security",
      "Node.js secure coding",
      "Express.js security"
    ],
    "name": "nodejs-specialist",
    "source_digest": "sha256:1d670f362a6a6b58b8ed484dde6669f82f10a8d3f0d2aedd082f138b0d22322c",
    "version": "4ea80e36-1757009195"
  },
  "rules": [
    {
      "detect": {
        "semgrep": [
          "javascript.nodejs.security.blocking-event-loop",
          "javascript.nodejs.security.sync-file-operations",
          "javascript.express.security.audit.express-cors-origin-wildcard",
          "javascript.lang.security.audit.crypto-js-hardcoded-secret",
          "javascript.express.security.audit.express-helmet-disabled"
        ]
      },
      "do": [
        "Use asynchronous operations for CPU-intensive tasks",
        "Avoid synchronous file operations that can block the event loop",
        "Utilize callbacks or Promises for non-blocking execution"
      ],
      "dont": [
        "Do not perform synchronous operations in event loop",
        "Avoid synchronous file system operations"
      ],
      "id": "NODE-PREVENT-001",
      "refs": {
        "cwe": [
          "CWE-400",
          "CWE-399"
        ],
        "owasp": [
          "A7:2021",
          "A1:2021"
        ]
      },
      "requirement": "Avoid blocking the Node.js event loop with synchronous operations to maintain application responsiveness. Ensure all blocking operations are performed asynchronously to prevent delays in event processing and potential DoS vulnerabilities.",
      "scope": "web-application",
      "severity": "high",
      "title": "Prevent blocking the event loop with asynchronous operations",
      "verify": {
        "tests": [
          "Profile application performance to identify blocking operations",
          "Review codebase for synchronous calls within event loop"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.nodejs.security.request-size-limits",
          "javascript.nodejs.security.raw-body-usage",
          "javascript.express.security.audit.express-cors-origin-wildcard",
          "javascript.lang.security.audit.crypto-js-hardcoded-secret",
          "javascript.express.security.audit.express-helmet-disabled"
        ]
      },
      "do": [
        "Limit request body size for POST, PUT, and DELETE requests",
        "Validate request content type before processing",
        "Use 'raw-body' or similar libraries to set request size limits"
      ],
      "dont": [
        "Do not allow unlimited request body sizes",
        "Avoid processing requests without size validation"
      ],
      "id": "NODE-PREVENT-RESTRICT-001",
      "refs": {
        "cwe": [
          "CWE-770",
          "CWE-400"
        ],
        "owasp": [
          "A6:2021",
          "A1:2021"
        ]
      },
      "requirement": "Implement request size limits to prevent attackers from sending large request bodies that can exhaust server resources or fill up disk space. Utilize libraries like 'raw-body' to restrict the size of incoming requests based on content type.",
      "scope": "web-application",
      "severity": "medium",
      "title": "Set request size limits to prevent DoS attacks",
      "verify": {
        "tests": [
          "Test sending requests with large payloads to verify size limits",
          "Review configuration to ensure request size limits are enforced"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.nodejs.security.callback-hell",
          "javascript.nodejs.security.promise-then-catch",
          "javascript.nodejs.security.async-await",
          "python.logging.security.audit.logging-sensitive-data",
          "java.lang.security.audit.system-exit",
          "javascript.express.security.audit.express-expose-sensitive-data"
        ]
      },
      "do": [
        "Refactor asynchronous code to use flat Promise chains",
        "Utilize .then() and .catch() functions for error handling",
        "Consider using async/await for cleaner asynchronous code"
      ],
      "dont": [
        "Do not create deeply nested callback functions",
        "Avoid relying solely on callbacks for error handling"
      ],
      "id": "NODE-PREVENT-CODE-HANDLING-001",
      "refs": {
        "cwe": [
          "CWE-829",
          "CWE-691"
        ],
        "owasp": [
          "A10:2021",
          "A8:2021"
        ]
      },
      "requirement": "Avoid nested callback functions in Node.js applications to prevent the 'Pyramid of Doom' or 'Callback Hell' issue. Utilize Promises for top-down execution and error handling to improve code readability and maintainability.",
      "scope": "web-application",
      "severity": "high",
      "title": "Use flat Promise chains to avoid Callback Hell",
      "verify": {
        "tests": [
          "Review codebase for nested callback functions",
          "Ensure Promises are used consistently for asynchronous operations",
          "Validate error handling mechanisms in asynchronous code"
        ]
      }
    }
  ],
  "schema_version": "1.0",
  "validation_hooks": {
    "semgrep": [
      "java.lang.security.audit.system-exit",
      "javascript.express.security.audit.express-cors-origin-wildcard",
      "javascript.express.security.audit.express-expose-sensitive-data",
      "javascript.express.security.audit.express-helmet-disabled",
      "javascript.lang.security.audit.crypto-js-hardcoded-secret",
      "javascript.nodejs.security.async-await",
      "javascript.nodejs.security.blocking-event-loop",
      "javascript.nodejs.security.callback-hell",
      "javascript.nodejs.security.promise-then-catch",
      "javascript.nodejs.security.raw-body-usage",
      "javascript.nodejs.security.request-size-limits",
      "javascript.nodejs.security.sync-file-operations",
      "python.logging.security.audit.logging-sensitive-data"
    ]
  }
}