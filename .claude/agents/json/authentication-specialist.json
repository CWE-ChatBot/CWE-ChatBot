{
  "agent": {
    "attribution": "# Attribution and Acknowledgments\n\n## Project Information\n- **Project**: GenAI Security Agents - Policy-as-Code Engine\n- **Repository**: genai-sec-agents\n- **License**: [To be determined]\n\n## Rule Card Sources\nRule Cards in this repository are based on:\n- Industry security standards and best practices\n- OWASP guidelines and recommendations  \n- CIS Benchmarks and controls\n- NIST Cybersecurity Framework\n- ASVS (Application Security Verification Standard)\n\n## Third-Party Components\n- **PyYAML**: YAML processing library\n- **jsonschema**: JSON Schema validation\n- **pytest**: Testing framework\n\n## OWASP CheatSheet Series\n- **Source**: https://github.com/OWASP/CheatSheetSeries\n- **License**: CC BY-SA 4.0\n- **Usage**: Semantic search corpus for security guidance\n- **Attribution**: \u00a9 OWASP Foundation, licensed under Creative Commons Attribution-ShareAlike 4.0 International License\n- **Local Path**: `vendor/owasp-cheatsheets/`\n- **Purpose**: Used to create normalized search corpus in `research/search_corpus/owasp/` for local semantic search capabilities\n\n## Contributors\n- Lead AppSec Engineer: [Name]\n- Development Team: [Names]\n\n## Standards References\nThis project implements security controls based on recognized industry standards. All Rule Cards include proper attribution to source standards in the `refs` section.",
    "build_date": "2025-09-04T18:06:33Z",
    "compiler_version": "1.0.0",
    "description": "Authentication security specialist covering login, MFA, password policies, and credential management",
    "domains": [
      "User authentication",
      "Multi-factor authentication",
      "Password security",
      "Credential management"
    ],
    "name": "authentication-specialist",
    "source_digest": "sha256:1d670f362a6a6b58b8ed484dde6669f82f10a8d3f0d2aedd082f138b0d22322c",
    "version": "4ea80e36-1757009193"
  },
  "rules": [
    {
      "detect": {
        "semgrep": [
          "oob-authentication-protection"
        ]
      },
      "do": [
        "Implement rate limiting for out-of-band code attempts",
        "Protect against timing attacks in code verification",
        "Prevent replay of used authentication codes"
      ],
      "dont": [
        "Allow unlimited code verification attempts",
        "Use predictable timing for code validation",
        "Accept previously used codes"
      ],
      "id": "AUTH-PROTECT-OOB-CODE-AUTH-001",
      "refs": {
        "asvs": [
          "V6.5.1"
        ],
        "cwe": [
          "CWE-307"
        ],
        "owasp": [
          "A07:2021"
        ]
      },
      "requirement": "Code-based out-of-band authentication must be protected against brute force attacks, replay attacks, and timing attacks.",
      "scope": "web-application",
      "severity": "medium",
      "title": "Protect Code-based Out-of-Band Authentication",
      "verify": {
        "tests": [
          "Test rate limiting on code verification attempts",
          "Verify protection against timing attacks"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "password-field-type"
        ]
      },
      "do": [
        "Use type=password for password input fields"
      ],
      "dont": [
        "Use plain text input fields for passwords"
      ],
      "id": "AUTH-CONFIGURE-PASSWORD-INPUT-001",
      "refs": {
        "asvs": [
          "V6.2.6"
        ],
        "cwe": [
          "CWE-312"
        ],
        "owasp": [
          "A2:2021"
        ]
      },
      "requirement": "Password input fields must use type=password to mask the entry. Applications may allow the user to temporarily view the entire masked password, or the last typed character of the password.",
      "scope": "web-application",
      "severity": "low",
      "title": "Password input fields must use type=password",
      "verify": {
        "tests": [
          "Manually verify that password input fields are masked"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.express.security.audit.express-session-no-secret",
          "python.django.security.audit.session-cookie-secure-false"
        ]
      },
      "do": [
        "Generate authentication seeds using Cryptographically Secure Pseudorandom Number Generators"
      ],
      "dont": [
        "Use insecure random number generators for authentication seeds"
      ],
      "id": "AUTH-CSP-AUTH-SECRET-002",
      "refs": {
        "asvs": [
          "V6.5.3"
        ],
        "cwe": [
          "CWE-287"
        ],
        "owasp": [
          "A07:2021"
        ]
      },
      "requirement": "Lookup secrets, out-of-band authentication code, and time-based one-time password seeds, are generated using a Cryptographically Secure Pseudorandom Number Generator (CSPRNG) to avoid predictable values.",
      "scope": "web-application",
      "severity": "medium",
      "title": "Use Cryptographically Secure Pseudorandom Number Generators for Authentication Seeds",
      "verify": {
        "tests": [
          "Testing methods to ensure secure generation of authentication seeds"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "identity-proofing-recovery"
        ]
      },
      "do": [
        "Validate identity proofing evidence at same level as initial enrollment",
        "Require identity verification for authentication factor recovery"
      ],
      "dont": [
        "Allow factor recovery without proper identity verification",
        "Use weaker identity proofing than initial enrollment"
      ],
      "id": "AUTH-VALIDATE-IDENTITY-PROOFING-001",
      "refs": {
        "asvs": [
          "V6.1.1"
        ],
        "cwe": [
          "CWE-287"
        ],
        "owasp": [
          "A07:2021"
        ]
      },
      "requirement": "Perform evidence of identity proofing at the same level as during enrollment when recovering lost authentication factors.",
      "scope": "web-application",
      "severity": "medium",
      "title": "Evidence of Identity Proofing for Lost Authentication Factor",
      "verify": {
        "tests": [
          "Verify identity proofing level matches enrollment requirements"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.express.security.audit.express-session-no-secret",
          "python.django.security.audit.session-cookie-secure-false"
        ]
      },
      "do": [
        "Generate initial passwords/activation codes securely and randomly",
        "Follow password policy requirements for generation",
        "Verify authentication strength information from the IdP if applicable"
      ],
      "dont": [
        "Do not use predictable or weak initial passwords/activation codes"
      ],
      "id": "AUTH-GEN-008",
      "refs": {
        "asvs": [
          "V6.8.4"
        ],
        "cwe": [
          "CWE-287"
        ],
        "owasp": [
          "A07:2021"
        ]
      },
      "requirement": "System generated initial passwords or activation codes must be securely randomly generated, follow password policy requirements, and verify authentication strength information from the IdP if applicable.",
      "scope": "web-application",
      "severity": "high",
      "title": "Secure Initial Passwords/Activation Codes",
      "verify": {
        "tests": [
          "Test generation and verification of initial passwords/activation codes"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.express.security.audit.express-session-no-secret",
          "python.django.security.audit.session-cookie-secure-false"
        ]
      },
      "do": [
        "Offer PSTN-based OTPs only after validating the phone number",
        "Provide information on security risks to users when offering PSTN-based OTPs",
        "Bind out-of-band authentication requests, codes, or tokens to the original authentication request",
        "Protect code-based out-of-band authentication mechanisms against brute force attacks with rate limiting",
        "Use codes with at least 64 bits of entropy for out-of-band authentication"
      ],
      "dont": [
        "Offer phone and SMS as options for Level 3 applications"
      ],
      "id": "AUTHENTICATION-NEW-003",
      "refs": {
        "asvs": [
          "V6.6.1",
          "V6.6.2",
          "V6.6.3"
        ],
        "cwe": [
          "CWE-287"
        ],
        "owasp": [
          "A07:2021"
        ]
      },
      "requirement": "Authentication mechanisms using the Public Switched Telephone Network (PSTN) to deliver One-time Passwords...",
      "scope": "web-application",
      "severity": "medium",
      "title": "Out-of-Band Authentication Mechanisms",
      "verify": {
        "tests": [
          "Verify authentication mechanisms and credential handling"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.express.security.audit.express-session-no-secret",
          "python.django.security.audit.session-cookie-secure-false"
        ]
      },
      "do": [
        "Ensure SAML assertions are processed uniquely and not reused"
      ],
      "dont": [
        "Do not reuse SAML assertions within their validity period"
      ],
      "id": "AUTH-PREVENT-SAML-001",
      "refs": {
        "asvs": [
          "V6.8.3"
        ],
        "cwe": [
          "CWE-352"
        ],
        "owasp": [
          "A2:2021"
        ]
      },
      "requirement": "SAML assertions are uniquely processed and used only once within the validity period to prevent replay attacks.",
      "scope": "web-application",
      "severity": "medium",
      "title": "Unique Processing of SAML Assertions",
      "verify": {
        "tests": [
          "Test uniqueness and non-replay of SAML assertions"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.express.security.audit.express-session-no-secret",
          "python.django.security.audit.session-cookie-secure-false"
        ]
      },
      "do": [
        "Generate challenge nonces that are at least 64 bits long and unique"
      ],
      "dont": [
        "Do not reuse challenge nonces or use non-unique values"
      ],
      "id": "AUTH-AUTH-LIFETIME-001",
      "refs": {
        "asvs": [
          "V6.7.2"
        ],
        "cwe": [
          "CWE-330"
        ],
        "owasp": [
          "A3:2021"
        ]
      },
      "requirement": "The challenge nonce is at least 64 bits in length, and statistically unique or unique over the lifetime of the cryptographic device.",
      "scope": "web-application",
      "severity": "high",
      "title": "Strong Challenge Nonce for Cryptographic Authentication",
      "verify": {
        "tests": [
          "Test generation and uniqueness of challenge nonces"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "multi-factor-authentication"
        ]
      },
      "do": [
        "Implement multi-factor authentication",
        "Use hardware-based authentication as one factor for L3"
      ],
      "dont": [
        "Rely solely on single-factor authentication"
      ],
      "id": "AUTH-IMPLEMENT-MULTIFACTOR-AUTH-001",
      "refs": {
        "asvs": [
          "V6.3.3"
        ],
        "cwe": [
          "CWE-308"
        ],
        "owasp": [
          "A3:2021"
        ]
      },
      "requirement": "Either a multi-factor authentication mechanism or a combination of single-factor authentication mechanisms must be used to access the application. For L3, one factor must be hardware-based.",
      "scope": "web-application",
      "severity": "medium",
      "title": "Multi-Factor Authentication Usage",
      "verify": {
        "tests": [
          "Test multi-factor authentication implementation"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.express.security.audit.express-session-no-secret",
          "python.django.security.audit.session-cookie-secure-false"
        ]
      },
      "do": [
        "Allow passwords with a minimum length of 64 characters",
        "Ensure challenge nonces are at least 64 bits in length and unique"
      ],
      "dont": [
        "Enforce passwords shorter than 64 characters"
      ],
      "id": "AUTH-ALLOW-PASSWORD-004",
      "refs": {
        "asvs": [
          "V6.7.2"
        ],
        "cwe": [
          "CWE-287"
        ],
        "owasp": [
          "A07:2021"
        ]
      },
      "requirement": "Passwords of at least 64 characters are permitted and challenge nonces are at least 64 bits in length.",
      "scope": "web-application",
      "severity": "high",
      "title": "Allow passwords of at least 64 characters",
      "verify": {
        "tests": [
          "Test password length enforcement and nonce generation"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.express.security.audit.express-session-no-secret",
          "python.django.security.audit.session-cookie-secure-false"
        ]
      },
      "do": [
        "Use type=password for password input fields",
        "Allow temporary viewing of the entire masked password or the last typed character"
      ],
      "dont": [
        "Use plain text for password input fields"
      ],
      "id": "AUTH-NEW-006",
      "refs": {
        "asvs": [
          "V6.2.6"
        ],
        "cwe": [
          "CWE-287"
        ],
        "owasp": [
          "A07:2021"
        ]
      },
      "requirement": "Password input fields must use type=password to mask the entry and allow temporary viewing of the entire masked password or the last typed character.",
      "scope": "web-application",
      "severity": "low",
      "title": "Password Input Field Masking",
      "verify": {
        "tests": [
          "Verify authentication mechanisms and credential handling"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.express.security.audit.express-session-no-secret",
          "python.django.security.audit.session-cookie-secure-false",
          "generic.secrets.security.hardcoded-secret"
        ]
      },
      "do": [
        "Register and identify users using a combination of IdP ID and user's ID in the IdP",
        "Implement checks to prevent identity spoofing across multiple identity providers",
        "Validate that user identities are unique across all supported IdPs"
      ],
      "dont": [
        "Do not rely solely on user identifier without considering IdP ID",
        "Do not allow unauthorized access through identity provider manipulation",
        "Avoid trusting user identity claims without proper IdP validation"
      ],
      "id": "AUTH-SPOOFING-001",
      "refs": {
        "asvs": [
          "V6.8.1"
        ],
        "cwe": [
          "CWE-347",
          "CWE-287"
        ],
        "owasp": [
          "A07:2021"
        ]
      },
      "requirement": "Verify that, if the application supports multiple identity providers (IdPs), the user's identity cannot be spoofed via another supported identity provider. The application should register and identify the user using a combination of the IdP ID and the user's ID in the IdP.",
      "scope": "web-application",
      "severity": "high",
      "title": "Prevent Identity Spoofing with Multiple Identity Providers",
      "verify": {
        "tests": [
          "Test identity verification across multiple identity providers",
          "Verify prevention of identity spoofing scenarios",
          "Test user registration with duplicate identities across IdPs"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.express.security.audit.express-session-no-secret",
          "python.django.security.audit.session-cookie-secure-false"
        ]
      },
      "do": [
        "Use biometric authentication in conjunction with something you have or know"
      ],
      "dont": [
        "Rely solely on biometric authentication"
      ],
      "id": "AUTH-AUTH-BIOMETRIC-001",
      "refs": {
        "asvs": [
          "V6.5.7"
        ],
        "cwe": [
          "CWE-308"
        ],
        "owasp": [
          "A3:2021"
        ]
      },
      "requirement": "Biometric authentication mechanisms should only be used as secondary factors.",
      "scope": "web-application",
      "severity": "high",
      "title": "Secure Use of Biometric Authentication",
      "verify": {
        "tests": [
          "Verify biometric authentication is used as a secondary factor"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.express.security.audit.express-session-no-secret",
          "python.django.security.audit.session-cookie-secure-false"
        ]
      },
      "do": [
        "Implement mechanisms to revoke authentication factors"
      ],
      "dont": [
        "Allow unrevokeable authentication factors"
      ],
      "id": "AUTH-FACTOR-REVOCATION-001",
      "refs": {
        "asvs": [
          "V6.5.6"
        ],
        "cwe": [
          "CWE-602"
        ],
        "owasp": [
          "A3:2021"
        ]
      },
      "requirement": "Any authentication factor must be revocable in case of theft or loss.",
      "scope": "web-application",
      "severity": "high",
      "title": "Revocation of Authentication Factors",
      "verify": {
        "tests": [
          "Test revocation functionality for authentication factors"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "user-enumeration-protection"
        ]
      },
      "do": [
        "Implement protection against user enumeration"
      ],
      "dont": [
        "Reveal valid users through error messages or response times"
      ],
      "id": "AUTH-GEN-007",
      "refs": {
        "asvs": [
          "V6.3.8"
        ],
        "cwe": [
          "CWE-200"
        ],
        "owasp": [
          "A8:2021"
        ]
      },
      "requirement": "Valid users cannot be deduced from failed authentication challenges, such as by error messages or response times.",
      "scope": "web-application",
      "severity": "high",
      "title": "Protection Against User Enumeration",
      "verify": {
        "tests": [
          "Verify protection against user enumeration"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "admin-initiated-password-reset"
        ]
      },
      "do": [
        "Enable administrative users to initiate password reset process for users",
        "Ensure administrative users cannot change or choose the user's password"
      ],
      "dont": [
        "Allow administrative users to change or choose user passwords"
      ],
      "id": "AUTH-ALLOW-PASSWORD-003",
      "refs": {
        "asvs": [
          "V6.4.6"
        ],
        "cwe": [
          "CWE-640"
        ],
        "owasp": [
          "A11:2021"
        ]
      },
      "requirement": "Allow administrative users to initiate the password reset process for users without changing or choosing the user's password.",
      "scope": "web-application",
      "severity": "high",
      "title": "Admin-initiated Password Reset Process",
      "verify": {
        "tests": [
          "Verify that administrative users can initiate password reset without changing user passwords"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "allow-paste-functionality"
        ]
      },
      "do": [
        "Allow users to paste passwords"
      ],
      "dont": [],
      "id": "AUTH-ALLOW-PASSWORD-005",
      "refs": {
        "asvs": [
          "V6.2.7"
        ],
        "cwe": [
          "CWE-312"
        ],
        "owasp": [
          "A2:2021"
        ]
      },
      "requirement": "'paste' functionality, browser password helpers, and external password managers are permitted.",
      "scope": "web-application",
      "severity": "low",
      "title": "Allow 'paste' functionality and external password managers",
      "verify": {
        "tests": [
          "Verify that 'paste' functionality is enabled"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.express.security.audit.express-session-no-secret",
          "python.django.security.audit.session-cookie-secure-false"
        ]
      },
      "do": [
        "Use a trusted time source for checking TOTPs to prevent manipulation.",
        "Implement mechanisms to ensure TOTPs are not based on client-provided time."
      ],
      "dont": [
        "Do not rely on untrusted time sources for validating TOTPs."
      ],
      "id": "AUTH-PASSWORD-001",
      "refs": {
        "asvs": [
          "V6.5.8"
        ],
        "cwe": [
          "CWE-287"
        ],
        "owasp": [
          "A07:2021"
        ]
      },
      "requirement": "Time-based one-time passwords (TOTPs) are checked based on a time source from a trusted service and not from an untrusted or client provided time.",
      "scope": "web-application",
      "severity": "high",
      "title": "Secure Time-based One-time Passwords (TOTPs)",
      "verify": {
        "tests": [
          "Verify that TOTPs are validated using a trusted time source."
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "no-periodic-rotation"
        ]
      },
      "do": [
        "Do not enforce periodic password changes"
      ],
      "dont": [],
      "id": "AUTH-CREDENTIAL-PASSWORD-001",
      "refs": {
        "asvs": [
          "V6.2.10"
        ],
        "cwe": [
          "CWE-521"
        ],
        "owasp": [
          "A2:2021"
        ]
      },
      "requirement": "A user's password stays valid until it is discovered to be compromised or the user rotates it. The application must not require periodic credential rotation.",
      "scope": "web-application",
      "severity": "medium",
      "title": "Do not require periodic credential rotation",
      "verify": {
        "tests": [
          "Verify that periodic password rotation is not enforced"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.express.security.audit.express-session-no-secret",
          "python.django.security.audit.session-cookie-secure-false"
        ]
      },
      "do": [
        "Set maximum lifetime of 10 minutes for out-of-band requests and 30 seconds for TOTPs"
      ],
      "dont": [
        "Allow indefinite lifetime for authentication codes"
      ],
      "id": "AUTH-OOB-LIFETIME-DEFINITION-001",
      "refs": {
        "asvs": [
          "V6.5.5"
        ],
        "cwe": [
          "CWE-613"
        ],
        "owasp": [
          "A3:2021"
        ]
      },
      "requirement": "Out-of-band authentication requests, codes, or tokens must have a defined lifetime.",
      "scope": "web-application",
      "severity": "medium",
      "title": "Define Lifetime for Out-of-Band Authentication",
      "verify": {
        "tests": [
          "Verify the defined lifetimes for authentication tokens"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "suspicious-authentication-attempts"
        ]
      },
      "do": [
        "Implement notification for suspicious authentication attempts"
      ],
      "dont": [
        "Ignore suspicious authentication attempts"
      ],
      "id": "AUTH-GEN-004",
      "refs": {
        "asvs": [
          "V6.3.5"
        ],
        "cwe": [
          "CWE-285"
        ],
        "owasp": [
          "A5:2021"
        ]
      },
      "requirement": "Users must be notified of suspicious authentication attempts, successful or unsuccessful.",
      "scope": "web-application",
      "severity": "high",
      "title": "Suspicious Authentication Attempts Notification",
      "verify": {
        "tests": [
          "Test notification for suspicious authentication attempts"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "password-hints-and-secret-questions"
        ]
      },
      "do": [
        "Implement alternative authentication methods that do not rely on password hints or secret questions"
      ],
      "dont": [
        "Use password hints or knowledge-based authentication for user authentication"
      ],
      "id": "AUTH-AUTH-SECRET-PASSWORD-001",
      "refs": {
        "asvs": [
          "V6.4.2"
        ],
        "cwe": [
          "CWE-640"
        ],
        "owasp": [
          "A11:2021"
        ]
      },
      "requirement": "Do not use password hints or knowledge-based authentication (secret questions) for user authentication.",
      "scope": "web-application",
      "severity": "low",
      "title": "Use of Password Hints and Knowledge-based Authentication",
      "verify": {
        "tests": [
          "Verify that password hints or secret questions are not used for user authentication"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "authentication-change-notification"
        ]
      },
      "do": [
        "Send notifications when authentication details change",
        "Include relevant change information in notifications",
        "Provide secure communication channels for notifications"
      ],
      "dont": [
        "Update authentication without user notification",
        "Send notifications with sensitive authentication data"
      ],
      "id": "AUTH-IMPLEMENT-UPDATE-NOTIFICATION-001",
      "refs": {
        "asvs": [
          "V6.4.1"
        ],
        "cwe": [
          "CWE-287"
        ],
        "owasp": [
          "A07:2021"
        ]
      },
      "requirement": "Send notifications to users when authentication details are updated to ensure visibility and prevent unauthorized changes.",
      "scope": "web-application",
      "severity": "medium",
      "title": "Authentication Details Update Notification",
      "verify": {
        "tests": [
          "Verify notifications are sent on authentication updates",
          "Test notification content excludes sensitive data"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.express.security.audit.express-session-no-secret",
          "python.django.security.audit.session-cookie-secure-false"
        ]
      },
      "do": [
        "Process SAML assertions uniquely",
        "Ensure one-time use of SAML assertions"
      ],
      "dont": [
        "Do not reuse SAML assertions"
      ],
      "id": "AUTH-PREVENT-SAML-002",
      "refs": {
        "asvs": [
          "V6.8.3"
        ],
        "cwe": [
          "CWE-287"
        ],
        "owasp": [
          "A07:2021"
        ]
      },
      "requirement": "Process SAML assertions uniquely and ensure they are used only once within their validity period to prevent replay attacks.",
      "scope": "web-application",
      "severity": "medium",
      "title": "Prevent Replay Attacks with SAML Assertions",
      "verify": {
        "tests": [
          "Test uniqueness and one-time use of SAML assertions"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "expiring-authentication-renewal-instructions"
        ]
      },
      "do": [
        "Send renewal instructions with enough time before expiration for users to renew their authentication mechanisms",
        "Configure automated reminders if necessary"
      ],
      "dont": [
        "Delay sending renewal instructions until authentication mechanisms have expired"
      ],
      "id": "AUTH-IMPLEMENT-RENEWAL-INSTRUCTIONS-001",
      "refs": {
        "asvs": [
          "V6.4.5"
        ],
        "cwe": [
          "CWE-640"
        ],
        "owasp": [
          "A11:2021"
        ]
      },
      "requirement": "Send renewal instructions for expiring authentication mechanisms with sufficient time before expiration, and configure automated reminders if necessary.",
      "scope": "web-application",
      "severity": "high",
      "title": "Renewal Instructions for Expiring Authentication Mechanisms",
      "verify": {
        "tests": [
          "Verify that renewal instructions are sent with sufficient time before expiration"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "multi-factor-authentication-secrets-reuse"
        ]
      },
      "do": [
        "Implement mechanisms to invalidate and prevent reuse of multi-factor authentication secrets after a single use"
      ],
      "dont": [
        "Allow reuse of multi-factor authentication secrets"
      ],
      "id": "AUTH-AUTH-SECRET-MFA-001",
      "refs": {
        "asvs": [
          "V6.5.1"
        ],
        "cwe": [
          "CWE-640"
        ],
        "owasp": [
          "A11:2021"
        ]
      },
      "requirement": "Ensure that lookup secrets, out-of-band authentication requests or codes, and time-based one-time passwords (TOTPs) are only usable once.",
      "scope": "web-application",
      "severity": "medium",
      "title": "One-time Use of Multi-factor Authentication Secrets",
      "verify": {
        "tests": [
          "Verify that multi-factor authentication secrets are only usable once"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "email-based-authentication"
        ]
      },
      "do": [
        "Use dedicated authentication mechanisms instead of email",
        "Implement proper username/password authentication",
        "Reserve email for communication and recovery only"
      ],
      "dont": [
        "Use email address as primary authentication",
        "Rely on email-based authentication for sensitive operations",
        "Send authentication credentials via email"
      ],
      "id": "AUTH-RESTRICT-EMAIL-AUTH-001",
      "refs": {
        "asvs": [
          "V6.1.1"
        ],
        "cwe": [
          "CWE-287"
        ],
        "owasp": [
          "A07:2021"
        ]
      },
      "requirement": "Email addresses should not be used as the primary authentication mechanism to prevent email-based attacks and improve security.",
      "scope": "web-application",
      "severity": "high",
      "title": "Email Not Used for Authentication",
      "verify": {
        "tests": [
          "Verify email is not used for primary authentication",
          "Test that authentication uses proper mechanisms"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.express.security.audit.express-session-no-secret",
          "python.django.security.audit.session-cookie-secure-false"
        ]
      },
      "do": [
        "Validate phone numbers before offering PSTN OTP delivery"
      ],
      "dont": [
        "Allow PSTN OTP delivery for unvalidated phone numbers"
      ],
      "id": "AUTH-VALIDATE-PHONE-NUMBERS-001",
      "refs": {
        "asvs": [
          "V6.6.1"
        ],
        "cwe": [
          "CWE-601"
        ],
        "owasp": [
          "A3:2021"
        ]
      },
      "requirement": "PSTN OTP delivery should only be offered for validated phone numbers.",
      "scope": "web-application",
      "severity": "medium",
      "title": "Validate Phone Numbers for PSTN OTP Delivery",
      "verify": {
        "tests": [
          "Test PSTN OTP delivery for validated phone numbers"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.express.security.audit.express-session-no-secret",
          "python.django.security.audit.session-cookie-secure-false"
        ]
      },
      "do": [
        "Validate authentication strength information from the IdP",
        "Use a combination of IdP ID and user's ID for user identification"
      ],
      "dont": [
        "Do not rely solely on local authentication strength checks"
      ],
      "id": "AUTH-AUTH-004",
      "refs": {
        "asvs": [
          "V6.8.1"
        ],
        "cwe": [
          "CWE-287"
        ],
        "owasp": [
          "A07:2021"
        ]
      },
      "requirement": "Verify that, if an application uses a separate Identity Provider (IdP) and expects specific authentication strength, methods, or recentness for specific functions, the application verifies this using the information returned by the IdP. The application should register and identify the user using a combination of the IdP ID and the user's ID in the IdP.",
      "scope": "web-application",
      "severity": "medium",
      "title": "Verify Authentication Strength from Identity Provider",
      "verify": {
        "tests": [
          "Verify authentication strength validation from IdP"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "insecure-random-number-generator"
        ]
      },
      "do": [
        "Use a Cryptographically Secure Pseudorandom Number Generator (CSPRNG) to generate authentication secrets"
      ],
      "dont": [
        "Use insecure or predictable random number generators for generating authentication secrets"
      ],
      "id": "AUTH-CSP-AUTH-SECRET-001",
      "refs": {
        "asvs": [
          "V6.5.3"
        ],
        "cwe": [
          "CWE-640"
        ],
        "owasp": [
          "A11:2021"
        ]
      },
      "requirement": "Generate lookup secrets, out-of-band authentication codes, and time-based one-time password seeds using a Cryptographically Secure Pseudorandom Number Generator (CSPRNG).",
      "scope": "web-application",
      "severity": "medium",
      "title": "Use of Cryptographically Secure Pseudorandom Number Generators",
      "verify": {
        "tests": [
          "Verify that a CSPRNG is used to generate authentication secrets"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "verify-password-exactly"
        ]
      },
      "do": [
        "Verify user's password exactly as entered"
      ],
      "dont": [],
      "id": "AUTH-PASSWORD-004",
      "refs": {
        "asvs": [
          "V6.2.8"
        ],
        "cwe": [
          "CWE-312"
        ],
        "owasp": [
          "A2:2021"
        ]
      },
      "requirement": "Verifies the user's password exactly as received from the user, without any modifications such as truncation or case transformation.",
      "scope": "web-application",
      "severity": "low",
      "title": "Verify user's password exactly as received",
      "verify": {
        "tests": [
          "Test password verification without modifications"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.express.security.audit.express-session-no-secret",
          "python.django.security.audit.session-cookie-secure-false"
        ]
      },
      "do": [
        "Verify the user's password exactly as received",
        "Do not modify the password such as truncation or case transformation"
      ],
      "dont": [
        "Modify the user's password before verification"
      ],
      "id": "AUTH-NEW-007",
      "refs": {
        "asvs": [
          "V6.2.8"
        ],
        "cwe": [
          "CWE-287"
        ],
        "owasp": [
          "A07:2021"
        ]
      },
      "requirement": "Verify the user's password exactly as received without any modifications such as truncation or case transformation.",
      "scope": "web-application",
      "severity": "medium",
      "title": "Password Verification Integrity",
      "verify": {
        "tests": [
          "Verify authentication mechanisms and credential handling"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "default-user-accounts"
        ]
      },
      "do": [
        "Ensure default user accounts are either not present or disabled"
      ],
      "dont": [
        "Keep default user accounts active"
      ],
      "id": "AUTH-GEN-001",
      "refs": {
        "asvs": [
          "V6.3.2"
        ],
        "cwe": [
          "CWE-16"
        ],
        "owasp": [
          "A2:2021"
        ]
      },
      "requirement": "Default user accounts (e.g., 'root', 'admin', or 'sa') are not present in the application or are disabled.",
      "scope": "web-application",
      "severity": "low",
      "title": "Default User Accounts Absence",
      "verify": {
        "tests": [
          "Manually verify default user accounts are not present or disabled"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "insecure-password-reset-process"
        ]
      },
      "do": [
        "Require users to verify their identity through multi-factor authentication during the password reset process"
      ],
      "dont": [
        "Bypass multi-factor authentication during the password reset process"
      ],
      "id": "AUTH-AUTH-MFA-PASSWORD-001",
      "refs": {
        "asvs": [
          "V6.4.3"
        ],
        "cwe": [
          "CWE-640"
        ],
        "owasp": [
          "A11:2021"
        ]
      },
      "requirement": "Implement a secure process for resetting forgotten passwords that does not bypass multi-factor authentication mechanisms.",
      "scope": "web-application",
      "severity": "medium",
      "title": "Secure Password Reset Process",
      "verify": {
        "tests": [
          "Verify that the password reset process requires multi-factor authentication"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.express.security.audit.express-session-no-secret",
          "python.django.security.audit.session-cookie-secure-false",
          "generic.secrets.security.hardcoded-secret"
        ]
      },
      "do": [
        "Implement rate limiting for push notifications in multi-factor authentication",
        "Consider implementing number matching as an additional mitigation strategy",
        "Monitor and log excessive push notification attempts"
      ],
      "dont": [
        "Do not allow unlimited push notifications without rate limiting",
        "Do not rely solely on push notifications without additional controls",
        "Avoid implementing push notifications without abuse prevention mechanisms"
      ],
      "id": "AUTH-MFA-001",
      "refs": {
        "asvs": [
          "V6.6.4"
        ],
        "cwe": [
          "CWE-799",
          "CWE-287"
        ],
        "owasp": [
          "A07:2021"
        ]
      },
      "requirement": "Verify that rate limiting is applied to push notifications used for multi-factor authentication to prevent push bombing attacks. Number matching may also mitigate this risk by requiring user interaction.",
      "scope": "web-application",
      "severity": "high",
      "title": "Rate Limit Push Notifications for Multi-Factor Authentication",
      "verify": {
        "tests": [
          "Test rate limiting functionality for push notifications",
          "Verify number matching implementation if used",
          "Test push bombing attack scenarios"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.express.security.audit.express-session-no-secret",
          "python.django.security.audit.session-cookie-secure-false"
        ]
      },
      "do": [
        "Store cryptographic authentication certificates securely to prevent tampering"
      ],
      "dont": [
        "Do not store certificates in plaintext or insecure locations"
      ],
      "id": "AUTH-AUTH-CERT-001",
      "refs": {
        "asvs": [
          "V6.7.1"
        ],
        "cwe": [
          "CWE-311"
        ],
        "owasp": [
          "A3:2021"
        ]
      },
      "requirement": "The certificates used to verify cryptographic authentication assertions are stored in a way that protects them from modification.",
      "scope": "web-application",
      "severity": "high",
      "title": "Secure Storage of Cryptographic Authentication Certificates",
      "verify": {
        "tests": [
          "Verify secure storage mechanisms for cryptographic certificates"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.express.security.audit.express-session-no-secret",
          "python.django.security.audit.session-cookie-secure-false"
        ]
      },
      "do": [
        "Store certificates in a secure location with restricted access",
        "Regularly monitor and audit access to certificates"
      ],
      "dont": [
        "Store certificates in plaintext or insecure locations"
      ],
      "id": "AUTH-AUTH-CERT-002",
      "refs": {
        "asvs": [
          "V6.7.1"
        ],
        "cwe": [
          "CWE-287"
        ],
        "owasp": [
          "A07:2021"
        ]
      },
      "requirement": "Verify that certificates used to verify cryptographic authentication assertions are stored securely to protect them from modification.",
      "scope": "web-application",
      "severity": "high",
      "title": "Store Certificates Securely for Cryptographic Authentication",
      "verify": {
        "tests": [
          "Verify access controls and monitoring for certificate storage"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "biometric-authentication-security"
        ]
      },
      "do": [
        "Implement secure biometric template storage",
        "Provide fallback authentication methods",
        "Protect biometric data with encryption",
        "Use secure biometric comparison algorithms"
      ],
      "dont": [
        "Store raw biometric data without protection",
        "Rely solely on biometric authentication",
        "Transmit biometric templates in plaintext"
      ],
      "id": "AUTH-IMPLEMENT-BIOMETRIC-AUTH-001",
      "refs": {
        "asvs": [
          "V6.3.1"
        ],
        "cwe": [
          "CWE-287"
        ],
        "owasp": [
          "A07:2021"
        ]
      },
      "requirement": "Implement biometric authentication with proper security controls including template protection and fallback mechanisms.",
      "scope": "web-application",
      "severity": "high",
      "title": "Biometric Authentication Usage",
      "verify": {
        "tests": [
          "Verify biometric template encryption",
          "Test fallback authentication mechanisms",
          "Validate secure biometric comparison"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "insecure-lookup-secrets-storage"
        ]
      },
      "do": [
        "Hash lookup secrets with less than 112 bits of entropy using an approved hashing algorithm with a random salt"
      ],
      "dont": [
        "Store lookup secrets with less than 112 bits of entropy in plain or reversible format"
      ],
      "id": "AUTH-HASH-SECRET-SALT-001",
      "refs": {
        "asvs": [
          "V6.5.2"
        ],
        "cwe": [
          "CWE-640"
        ],
        "owasp": [
          "A11:2021"
        ]
      },
      "requirement": "Hash lookup secrets with less than 112 bits of entropy using an approved password storage hashing algorithm with a random salt.",
      "scope": "web-application",
      "severity": "medium",
      "title": "Secure Storage of Lookup Secrets",
      "verify": {
        "tests": [
          "Verify that lookup secrets are hashed with a random salt and approved algorithm"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.express.security.audit.express-session-no-secret",
          "python.django.security.audit.session-cookie-secure-false"
        ]
      },
      "do": [
        "Use passwords with a minimum of 20 bits of entropy (e.g., 4 random alphanumeric characters or 6 random digits)",
        "Ensure out-of-band authentication requests have a maximum lifetime of 10 minutes",
        "Ensure time-based one-time passwords (TOTPs) have a maximum lifetime of 30 seconds",
        "Revoke any authentication factor in case of theft or loss"
      ],
      "dont": [
        "Use biometric authentication mechanisms as primary factors",
        "Check TOTPs based on untrusted or client provided time"
      ],
      "id": "AUTH-PREVENT-PASSWORD-001",
      "refs": {
        "asvs": [
          "V6.5.4",
          "V6.5.5",
          "V6.5.6",
          "V6.5.7",
          "V6.5.8"
        ],
        "cwe": [
          "CWE-287"
        ],
        "owasp": [
          "A07:2021"
        ]
      },
      "requirement": "Prevent easy to guess passwords by using a documented list of context specific words....",
      "scope": "web-application",
      "severity": "high",
      "title": "Prevent Easy to Guess Passwords",
      "verify": {
        "tests": [
          "Verify authentication mechanisms and credential handling"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.express.security.audit.express-session-no-secret",
          "python.django.security.audit.session-cookie-secure-false"
        ]
      },
      "do": [
        "Verify that the password reset process does not bypass multi-factor authentication mechanisms",
        "Implement evidence of identity proofing at the same level as during enrollment if a multi-factor authentication factor is lost",
        "Send renewal instructions for authentication mechanisms with enough time before expiration, configuring automated reminders if necessary"
      ],
      "dont": [
        "Allow password reset processes to bypass multi-factor authentication mechanisms"
      ],
      "id": "AUTHENTICATION-NEW-001",
      "refs": {
        "asvs": [
          "V6.4.3",
          "V6.4.4",
          "V6.4.5",
          "V6.4.6"
        ],
        "cwe": [
          "CWE-287"
        ],
        "owasp": [
          "A07:2021"
        ]
      },
      "requirement": "Implement a secure process for resetting forgotten passwords that does not bypass any enabled multi-factor authentication mechanisms.",
      "scope": "web-application",
      "severity": "medium",
      "title": "Secure Process for Resetting Forgotten Passwords",
      "verify": {
        "tests": [
          "Verify authentication mechanisms and credential handling"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.express.security.audit.express-session-no-secret",
          "python.django.security.audit.session-cookie-secure-false"
        ]
      },
      "do": [
        "Ensure out-of-band codes are only valid for the original request"
      ],
      "dont": [
        "Allow reuse of out-of-band codes for different requests"
      ],
      "id": "AUTH-AUTH-CODE-002",
      "refs": {
        "asvs": [
          "V6.6.2"
        ],
        "cwe": [
          "CWE-384"
        ],
        "owasp": [
          "A3:2021"
        ]
      },
      "requirement": "Out-of-band authentication codes must be bound to the original request.",
      "scope": "web-application",
      "severity": "medium",
      "title": "Bind Out-of-Band Authentication to Request",
      "verify": {
        "tests": [
          "Verify out-of-band code binding to requests"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.express.security.audit.express-session-no-secret",
          "python.django.security.audit.session-cookie-secure-false"
        ]
      },
      "do": [
        "Generate secrets with at least 20 bits of entropy"
      ],
      "dont": [
        "Use weak secrets with insufficient entropy"
      ],
      "id": "AUTH-MFA-STRONG-SECRETS-001",
      "refs": {
        "asvs": [
          "V6.5.4"
        ],
        "cwe": [
          "CWE-326"
        ],
        "owasp": [
          "A3:2021"
        ]
      },
      "requirement": "Lookup secrets and out-of-band authentication codes must have a minimum of 20 bits of entropy.",
      "scope": "web-application",
      "severity": "medium",
      "title": "Use Strong Secrets for Multi-factor Authentication",
      "verify": {
        "tests": [
          "Test the entropy of generated secrets"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.express.security.audit.express-session-no-secret",
          "python.django.security.audit.session-cookie-secure-false",
          "generic.secrets.security.hardcoded-secret"
        ]
      },
      "do": [
        "Always validate digital signatures on authentication assertions for presence and integrity",
        "Reject any assertions that are unsigned or have invalid signatures",
        "Implement proper cryptographic verification of signature algorithms"
      ],
      "dont": [
        "Do not accept authentication assertions without validating digital signatures",
        "Do not rely on client-side signature validation alone",
        "Avoid accepting assertions with weak or deprecated signature algorithms"
      ],
      "id": "AUTH-SIGNATURE-001",
      "refs": {
        "asvs": [
          "V6.8.2"
        ],
        "cwe": [
          "CWE-345",
          "CWE-287"
        ],
        "owasp": [
          "A07:2021"
        ]
      },
      "requirement": "Verify that the presence and integrity of digital signatures on authentication assertions are always validated, rejecting any assertions that are unsigned or have invalid signatures.",
      "scope": "web-application",
      "severity": "high",
      "title": "Validate Digital Signatures on Authentication Assertions",
      "verify": {
        "tests": [
          "Test validation of digital signatures on authentication assertions",
          "Verify rejection of unsigned assertions",
          "Test handling of invalid signature scenarios"
        ]
      }
    },
    {
      "detect": {
        "semgrep": [
          "javascript.express.security.audit.express-session-no-secret",
          "python.django.security.audit.session-cookie-secure-false"
        ]
      },
      "do": [
        "Implement notification system for suspicious authentication attempts",
        "Include details of the suspicious activity in the notification",
        "Provide guidance on actions to take in response to suspicious attempts"
      ],
      "dont": [
        "Ignore or fail to notify users of suspicious authentication attempts"
      ],
      "id": "AUTH-GEN-003",
      "refs": {
        "asvs": [
          "V6.3.5:2021"
        ],
        "cwe": [
          "CWE-287"
        ],
        "owasp": [
          "A07:2021"
        ]
      },
      "requirement": "Users must be notified of suspicious authentication attempts, including unusual locations, partial successful attempts, long periods of inactivity, or multiple unsuccessful attempts.",
      "scope": "web-application",
      "severity": "high",
      "title": "Notification of Suspicious Authentication Attempts",
      "verify": {
        "tests": [
          "Test notification functionality for suspicious authentication attempts"
        ]
      }
    }
  ],
  "schema_version": "1.0",
  "validation_hooks": {
    "semgrep": [
      "admin-initiated-password-reset",
      "allow-paste-functionality",
      "authentication-change-notification",
      "biometric-authentication-security",
      "default-user-accounts",
      "email-based-authentication",
      "expiring-authentication-renewal-instructions",
      "generic.secrets.security.hardcoded-secret",
      "identity-proofing-recovery",
      "insecure-lookup-secrets-storage",
      "insecure-password-reset-process",
      "insecure-random-number-generator",
      "javascript.express.security.audit.express-session-no-secret",
      "multi-factor-authentication",
      "multi-factor-authentication-secrets-reuse",
      "no-periodic-rotation",
      "oob-authentication-protection",
      "password-field-type",
      "password-hints-and-secret-questions",
      "python.django.security.audit.session-cookie-secure-false",
      "suspicious-authentication-attempts",
      "user-enumeration-protection",
      "verify-password-exactly"
    ]
  }
}