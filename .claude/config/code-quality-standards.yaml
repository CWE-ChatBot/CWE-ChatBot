# Code Quality Standards Configuration
# Configuration for production readiness, maintainability, and development best practices

code_quality:
  # Language detection patterns (leverages existing security tools patterns)
  detection:
    python:
      files: ["*.py", "requirements*.txt", "setup.py", "pyproject.toml", "Pipfile"]
      frameworks:
        django: ["django", "manage.py", "settings.py", "urls.py"]
        flask: ["flask", "app.py", "run.py"]
        fastapi: ["fastapi", "main.py"]
    javascript:
      files: ["*.js", "*.jsx", "*.ts", "*.tsx", "package.json", "*.mjs"]
      frameworks:
        react: ["react", "jsx", "tsx", "public/index.html"]
        node: ["express", "node", "server.js", "index.js"]
        vue: ["vue", "*.vue", "vue.config.js"]
    java:
      files: ["*.java", "pom.xml", "build.gradle", "*.gradle"]
      frameworks:
        spring: ["spring", "@RestController", "@Service", "@Entity"]
        android: ["android", "AndroidManifest.xml", "activity"]
    csharp:
      files: ["*.cs", "*.csproj", "*.sln", "web.config"]
      frameworks:
        dotnet: [".NET", "ASP.NET", "Program.cs", "Startup.cs"]

  # Production Blocker Patterns (Critical Priority)
  production_blockers:
    severity: "critical"
    patterns:
      todo_fixme:
        - "TODO"
        - "FIXME" 
        - "HACK"
        - "XXX"
        - "BUG"
        - "TEMP"
        - "WORKAROUND"
      
      debug_statements:
        python:
          - "print("
          - "pprint("
          - "logging.debug("
          - "console.log"  # In Python templates
          - "breakpoint()"
          - "pdb.set_trace()"
        javascript:
          - "console.log("
          - "console.debug("
          - "console.warn("
          - "debugger;"
          - "alert("
        java:
          - "System.out.println("
          - "System.err.println("
          - "printStackTrace()"
          - ".debug("
        csharp:
          - "Console.WriteLine("
          - "Console.Write("
          - "Debug.WriteLine("
          - "Trace.WriteLine("
      
      placeholder_text:
        - "Replace with actual"
        - "Coming soon"
        - "PLACEHOLDER"
        - "Not implemented"
        - "TODO: implement"
        - "Fill in later"
        - "Replace this"
        - "Update this"
        - "Change this"
      
      hardcoded_values:
        - "localhost"
        - "127.0.0.1"
        - "password123"
        - "admin123"
        - "secret123"
        - "test123"
        - "api_key_here"
        - "your_token_here"

  # Code Structure Standards (High Priority)
  structure_standards:
    severity: "high"
    thresholds:
      max_function_lines: 50
      max_file_lines: 1000
      max_parameters: 7
      max_nesting_depth: 4
      min_function_name_length: 3
      max_line_length: 120
    
    required_patterns:
      error_handling:
        - "api_calls"
        - "file_operations" 
        - "network_requests"
        - "database_operations"
        - "external_services"
      
      naming_conventions:
        python:
          functions: "snake_case"
          classes: "PascalCase" 
          constants: "UPPER_SNAKE_CASE"
          files: "snake_case"
        javascript:
          functions: "camelCase"
          classes: "PascalCase"
          constants: "UPPER_SNAKE_CASE"
          files: "camelCase or kebab-case"
        java:
          functions: "camelCase"
          classes: "PascalCase"
          constants: "UPPER_SNAKE_CASE"
          packages: "lowercase"

  # Language-Specific Quality Standards (Medium Priority)
  language_specific:
    severity: "medium"
    
    python:
      style_guide: "PEP 8"
      primary_tool: "ruff"
      ruff_config:
        select: ["E", "W", "F", "I", "B", "C901", "D", "UP", "SIM"]
        ignore: ["E501"]  # Line length handled separately
        line_length: 88
        target_version: "py38"
        per_file_ignores:
          "tests/*": ["D"]
          "__init__.py": ["F401"]
      requirements:
        docstrings: true
        type_hints: true
        import_organization: true
        line_length: 88  # Updated to match Ruff default
      
      anti_patterns:
        - "except:"  # Bare except clause
        - "eval("
        - "exec("
        - "from * import"
        - "global "
        - "__import__("
      
      good_patterns:
        - "with open("  # Context managers
        - "from typing import"  # Type hints
        - 'def.*\(.*\) -> .*:'  # Return type annotations
        - '""".*"""'  # Proper docstrings
      
      required_imports:
        - "from __future__ import annotations"  # For Python 3.7+
        
    javascript:
      style_guide: "ESLint"
      requirements:
        jsdoc: true
        strict_mode: true
        semicolons: true
        const_let_over_var: true
      
      anti_patterns:
        - "var "  # Use const/let instead
        - "== null"  # Use strict equality
        - "!= null"  # Use strict equality  
        - "setTimeout\\(.*['\"]"  # String in setTimeout
        - "eval\\("
        - "document.write\\("
      
      good_patterns:
        - "const "
        - "let "
        - "=== null"
        - "!== null"
        - "async.*=>"  # Proper async functions
        - "/\\*\\*.*\\*/"  # JSDoc comments
        
    java:
      style_guide: "Google Java Style"
      requirements:
        javadoc: true
        final_variables: true
        proper_exceptions: true
        resource_management: true
      
      anti_patterns:
        - "\\.printStackTrace\\(\\)"
        - "catch.*\\{\\s*\\}"  # Empty catch blocks
        - "System\\.exit\\("
        - "finalize\\(\\)"
      
      good_patterns:
        - "try.*finally"  # Proper resource management
        - "@Override"
        - "final "
        - "/\\*\\*.*\\*/"  # JavaDoc

  # Performance & Maintainability Standards (Low Priority)  
  maintainability:
    severity: "low"
    
    documentation:
      min_comment_ratio: 0.1  # 10% comment to code ratio
      complex_function_docs: true
      api_documentation: true
      readme_required: true
    
    performance_patterns:
      avoid:
        python:
          - "\\+.*in.*loop"  # String concatenation in loops
          - "len\\(.*\\).*range"  # Inefficient iteration
        javascript:  
          - "innerHTML.*\\+"  # DOM manipulation in loops
          - "document\\.getElementById.*loop"  # DOM queries in loops
        java:
          - "String.*\\+.*loop"  # String concatenation in loops
          - "Vector"  # Use ArrayList instead
      
      prefer:
        python:
          - "join\\("  # Efficient string joining
          - "enumerate\\("  # Efficient iteration
        javascript:
          - "querySelector"  # Modern DOM selection
          - "const.*=.*document"  # Cache DOM queries
        java:
          - "StringBuilder"  # Efficient string building
          - "ArrayList"  # Preferred over Vector

  # Analysis Configuration
  analysis:
    # File exclusions
    exclude_patterns:
      - "node_modules/"
      - ".git/"
      - "__pycache__/"
      - "*.pyc"
      - ".venv/"
      - "venv/"
      - "dist/"
      - "build/"
      - "target/"
      - "*.min.js"
      - "*.min.css"
      - "vendor/"
      - "third_party/"
      - "dependencies/"
    
    # Maximum file size to analyze (bytes)
    max_file_size: 100000
    
    # Analysis depth
    max_directory_depth: 10
    
    # Scoring weights
    scoring:
      production_blockers: 0.4    # 40% weight
      structure_issues: 0.3       # 30% weight  
      language_specific: 0.2      # 20% weight
      maintainability: 0.1        # 10% weight
    
    # Quality thresholds for overall grades
    quality_grades:
      A: 90  # Excellent quality
      B: 80  # Good quality
      C: 70  # Acceptable quality
      D: 60  # Needs improvement
      F: 0   # Significant issues

  # Reporting Configuration
  reporting:
    formats: ["markdown", "json", "html"]
    include_code_snippets: true
    include_line_numbers: true
    include_fix_suggestions: true
    max_issues_per_category: 50
    
    severity_display:
      critical: "üö® CRITICAL"
      high: "‚ö†Ô∏è  HIGH"  
      medium: "üìã MEDIUM"
      low: "üìù LOW"
    
    executive_summary:
      include_quality_score: true
      include_blocker_count: true
      include_recommendations: true
      include_metrics_comparison: true

# Integration with existing security tools
integration:
  security_tools:
    leverage_language_detection: true
    coordinate_with_security_reviewer: true
    shared_configuration_patterns: true
    
  development_workflow:
    pre_commit_hooks: true
    ci_cd_integration: true
    ide_integration: true
    code_review_automation: true

# Setup and installation requirements
setup:
  optional_tools:
    python:
      - name: "ruff"
        purpose: "High-performance Python linting and formatting (primary tool)"
        install: "pip install ruff"
        priority: "primary"
        integration: "ruff-validator sub-agent"
      - name: "black"
        purpose: "Code formatting validation (backup/comparison)"
        install: "pip install black"
        priority: "secondary"
      - name: "pylint" 
        purpose: "Advanced Python linting (additional analysis)"
        install: "pip install pylint"
        priority: "secondary"
    javascript:
      - name: "eslint"
        purpose: "JavaScript linting" 
        install: "npm install -g eslint"
      - name: "prettier"
        purpose: "Code formatting"
        install: "npm install -g prettier"
    java:
      - name: "checkstyle"
        purpose: "Java style checking"
        install: "Maven/Gradle plugin"

  environment_setup:
    detect_existing_linters: true
    respect_project_configs: true
    custom_rule_integration: true